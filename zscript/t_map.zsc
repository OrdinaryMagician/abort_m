Class TitleGreatOuchFaceInTheSky : Actor
{
	double swayphase, globalphase;
	double globalvol;
	Vector3 gx, gy, gz;
	action void A_FacePain()
	{
		A_StartSound("evan/pain",CHAN_VOICE,attenuation:ATTN_NONE);
		A_QuakeEx(3,3,3,8,0,65535,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.0);
	}
	action void A_FaceScream()
	{
		A_StartSound("evan/die",CHAN_VOICE,attenuation:ATTN_NONE);
		A_QuakeEx(4,4,4,100,0,65535,"",QF_RELATIVE|QF_SCALEUP,rollIntensity:1.2);
		ThinkerIterator ti = ThinkerIterator.Create("TitleFaceOrbiter");
		Actor a;
		while ( a = Actor(ti.Next()) ) a.SetStateLabel("Scream");
		Actor p = level.CreateActorIterator(90).Next();
		if ( !p ) return;
		let d = Spawn("TitleFaceBarrage",p.pos);
		d.angle = p.angle;
	}
	action void A_QuakeSettle()
	{
		A_QuakeEx(4,4,4,200,0,65535,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:1.2);
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		// Spawn orbiters
		for ( int i=0; i<90; i++ )
		{
			let o = Spawn("TitleFaceOrbiter");
			o.master = self;
			TitleFaceOrbiter(o).phase = i*4;
		}
		swayphase = 0;
		globalphase = 0;
	}
	override void Tick()
	{
		Super.Tick();
		roll = sin(swayphase)*15;
		swayphase += 1.5;
		globalphase += 1.2;
		double pt = sin(globalphase)*5, rl = cos(globalphase)*5;
		[gx, gy, gz] = abort_CoordUtil.GetAxes(pt,0,rl);
	}
	override void Activate( Actor activator )
	{
		SetStateLabel("Wakeup");
	}
	override void Deactivate( Actor activator )
	{
		globalvol = 1.0;
		SetStateLabel("QuietDown");
	}
	action void A_QuietDown()
	{
		invoker.globalvol = max(0.0,invoker.globalvol-0.02);
		let t = ThinkerIterator.Create("TitleOuchFace");
		TitleOuchFace f;
		while ( f = TitleOuchFace(t.Next()) )
			f.globalvol = invoker.globalvol;
		if ( invoker.globalvol <= 0.0 ) A_SetTics(-1);
	}
	Default
	{
		Scale 4.0;
		+ROLLSPRITE;
		+ROLLCENTER;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+INTERPOLATEANGLES;
	}
	States
	{
	Spawn:
		OUCH A -1;
		Stop;
	Wakeup:
		OUCH A 10;
		OUCH B 20;
		OUCH A 2;
		OUCH B 8;
		OUCH A 2;
		OUCH B 8;
		OUCH A 2;
		OUCH B 20;
		OUCH C 30;
		OUCH D 50 A_FacePain();
		OUCH C 10;
		OUCH E 20 A_FaceScream();
		OUCH F 80;
		OUCH F -1 A_QuakeSettle();
		Stop;
	QuietDown:
		OUCH F 1 A_QuietDown();
		Wait;
	}
}

Class TitleOuchFace : Actor
{
	int screamtimer, tickcount;
	double basescale, globalvol;

	override void Tick()
	{
		Super.Tick();
		if ( screamtimer-- <= 0 )
		{
			if ( pos.z <= floorz ) vel.z = FRandom[Ouch](2.0,8.0);
			if ( globalvol > 0 ) A_StartSound("ouch/dspdiehi",CHAN_VOICE,CHANF_OVERLAP,FRandom[Ouch](0.05,0.1)*globalvol,pitch:FRandom[Ouch](0.75,1.5));
			screamtimer = Random[Ouch](20,50);
			SetStateLabel("Scream");
			A_QuakeEx(1,1,1,30,0,300,"",QF_RELATIVE|QF_SCALEDOWN,falloff:200,rollIntensity:0.1);
		}
		tickcount++;
		if ( !(tickcount%8) ) A_ChangeVelocity(vel.x+FRandom[Ouch](-1.0,1.0),vel.y+FRandom[Ouch](-1.0,1.0),vel.z+FRandom[Ouch](-0.8,0.8));
		A_SetScale(basescale*FRandom[Ouch](0.75,1.5),basescale*FRandom[Ouch](0.75,1.5));
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		screamtimer = 0;
		tickcount = Random[Ouch](0,100);
		basescale = FRandom[Ouch](0.6,0.8);
		globalvol = 1.0;
	}

	Default
	{
		Radius 8;
		Height 16;
		+NOBLOCKMAP;
		+DROPOFF;
	}
	States
	{
	Spawn:
		OUCH C -1;
		Stop;
	Scream:
		OUCH E 4;
		OUCH F 12;
		OUCH E 8;
		Goto Spawn;
	}
}

Class TitleFaceBarrage : Actor
{
	int splodcnt;
	Default
	{
		+NOGRAVITY;
		+NOBLOCKMAP;
		ReactionTime 30;
	}
	action void A_Splode()
	{
		A_QuakeEx(1,1,1,4,0,65535,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:0.1);
		Vector3 dir = (cos(angle),sin(angle),0);
		Vector3 sides = (sin(angle),-cos(angle),0);
		for ( int i=0; i<8; i++ )
			Spawn("TitleFaceXplod",pos+dir*invoker.splodcnt*50+FRandom[Face](-800,800)*sides);
		invoker.splodcnt++;
		A_Countdown();
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay { invoker.splodcnt = 0; }
		TNT1 A 4 A_Splode;
		Wait;
	}
}

Class TitleFaceSmk : Actor
{
	Default
	{
		+NOGRAVITY;
		+NOBlOCKMAP;
		Scale 2.0;
	}
	States
	{
	Spawn:
		DZMK ABCD 8;
		Stop;
	}
}

Class TitleFaceXplod : Actor
{
	Default
	{
		Scale 1.5;
		+NOGRAVITY;
		+NOBLOCKMAP;
	}
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetTics(Random[Face](1,8));
		TNT1 A 0
		{
			A_StartSound("blast/splode");
			for ( int i=0; i<8; i++ )
				A_SpawnItemEx("TitleFaceSmk",FRandom[Face](-6,6),FRandom[Face](-6,6),FRandom[Face](4,10),FRandom[Face](-2,2),FRandom[Face](-2,2),FRandom[Face](0,5));
			for ( int i=0; i<2; i++ )
				A_SpawnItemEx("TitleOuchFace",Frandom[Face](-4,4),Frandom[Face](-4,4),Frandom[Face](2,8),tid:999);
		}
		DEXP ABCD 4 Bright;
		Stop;
	}
}

Class TitleFaceOrbiter : Actor
{
	double phase, spinspeed, swayspeed, swayphase;
	Vector3 ofs;
	override void Tick()
	{
		Super.Tick();
		if ( !master )
		{
			Destroy();
			return;
		}
		let m = TitleGreatOuchFaceInTheSky(master);
		Vector3 orbitdir = cos(phase)*m.gx + sin(phase)*m.gy;
		SetOrigin(m.pos+(0,0,40)+orbitdir*120+ofs,true);
		roll = sin(swayphase)*30;
		phase += spinspeed;
		swayphase += swayspeed;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		spinspeed = FRandom[Face](0.8,1.2);
		swayspeed = FRandom[Face](1,3);
		scale *= FRandom[Face](0.5,1.5);
		ofs = (FRandom[Face](-1,1),FRandom[Face](-1,1),FRandom[Face](-1,1)).unit()*FRandom[Face](1.0,16.0);
	}
	Default
	{
		Scale 0.3;
		+ROLLSPRITE;
		+ROLLCENTER;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+INTERPOLATEANGLES;
	}
	States
	{
	Spawn:
		OUCH A -1;
		Stop;
	Scream:
		OUCH A 1 A_SetTics(Random[Face](10,80));
		OUCH BCE 4;
		OUCH F -1;
		Stop;
	}
}
