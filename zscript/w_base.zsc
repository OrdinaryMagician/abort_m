Class KickPuff : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+PUFFONACTORS;
		+NOEXTREMEDEATH;
		Alpha 0.5;
		Scale 1.5;
		RenderStyle "Translucent";
		SeeSound "kick/hit";
		AttackSound "kick/wall";
		ActiveSound "kick/miss";
	}
	action void A_LesserPuffs()
	{
		for ( int i=0; i<10; i++ ) Spawn("LesserPuff",pos);
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	Crash:
		TNT1 A 1 A_LesserPuffs();
		Stop;
	}
}

Class LesserPuff : Actor
{
	Default
	{
		Radius 2;
		Height 2;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+FORCEXYBILLBOARD;
		+THRUACTORS;
		RenderStyle "Shaded";
		BounceType "Hexen";
		BounceFactor 1.0;
		WallBounceFactor 1.0;
		Scale 0.8;
		Alpha 0.5;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		double ang, pt;
		scale *= FRandom[Puff](0.5,1.0);
		alpha *= FRandom[Puff](0.5,1.0);
		ang = FRandom[Puff](0,360);
		pt = FRandom[Puff](-90,90);
		vel = (cos(pt)*cos(ang),cos(pt)*sin(ang),-sin(pt))*FRandom[Puff](0.5,2.0);
		SetState(ResolveState("Spawn")+Random[Puff](0,19));
		SetShade(Color(1,1,1)*Random[Puff](32,128));
	}
	States
	{
	Spawn:
		BSMK ABCDEFGHIJKLMNOPQRST 4 { A_FadeOut(0.08); vel *= 0.93; }
		Loop;
	}
}

Class StrongKickPuff : KickPuff
{
	Default
	{
		SeeSound "tile/hit";
		AttackSound "tile/wall";
		ActiveSound "tile/miss";
	}
	States
	{
	Crash:
		TNT1 AAAA 4 A_LesserPuffs();
		Stop;
	}
}

Class AbortWeapon : Weapon
{
	int kicktics;
	double kickx, kicky;
	int kick_i;
	double throwforce;
	int throwmass;
	bool kikku;
	String tname;

	Property KickTics: kicktics;
	Property KickX: kickx;
	Property KickY: kicky;
	Property ThrowForce: throwforce;
	Property ThrowMass: throwmass;
	Property ThrowName: tname;

	override String GetObituary( Actor victim, Actor inflictor, Name mod, bool playerattack )
	{
		if ( kikku )
		{
			if ( Owner && Owner.CountInv("AAAAAAAAA") )
				return StringTable.Localize("$O_KIKKUFAST");
			return StringTable.Localize("$O_KIKKU");
		}
		return Super.GetObituary(victim,inflictor,mod,playerattack);
	}

	Default
	{
		Weapon.BobStyle "Alpha";
		Weapon.BobSpeed 1.5;
		AbortWeapon.KickTics 0;
		AbortWeapon.KickX 0;
		AbortWeapon.KickY 0;
		AbortWeapon.ThrowForce 1;
		AbortWeapon.ThrowMass 100;
		AbortWeapon.ThrowName "$W_DEFAULT";
		+WEAPON.NOALERT;
		+WEAPON.AMMO_OPTIONAL;
		+WEAPON.ALT_AMMO_OPTIONAL;
		+INVENTORY.UNTOSSABLE;
	}
	action void A_Swing( double x = 0.0, double y = 0.0, double recoil = 0.0 )
	{
		A_SetPitch(pitch+y,SPF_INTERPOLATE);
		A_SetAngle(angle+x,SPF_INTERPOLATE);
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		vel -= recoil*x;
	}
	action void A_Kick()
	{
		double ang = angle;
		double pt = AimLineAttack(ang,DEFMELEERANGE*1.5);
		int dmg = Random[Kick](6,9)*2;
		double mm = dmg*220.;
		double zm = 0.2;
		Class<Actor> pufftype = "KickPuff";
		if ( CountInv("AAAAAAAAA") )
		{
			dmg *= dmg;
			mm = dmg*25.;
			zm = 0.4;
			pufftype = "StrongKickPuff";
		}
		FTranslatedLineTarget t;
		invoker.kikku = true;
		if ( LineAttack(ang,DEFMELEERANGE*1.5,pt,dmg,'Melee',pufftype,LAF_ISMELEEATTACK,t) )
		{
			A_AlertMonsters(300);
			if ( CountInv("AAAAAAAAA") ) A_QuakeEx(3,3,3,15,0,60,"",QF_RELATIVE|QF_SCALEDOWN,falloff:40);
			else A_QuakeEx(1,1,1,3,0,30,"",QF_RELATIVE|QF_SCALEDOWN,falloff:20);
			Vector3 dir = (cos(angle)*cos(pt)*mm,sin(angle)*cos(pt)*mm,-sin(pt)*mm + mm*zm);
			if ( t.linetarget && t.linetarget.SpecialBlastHandling(invoker,dir.length()) )
			{
				double hmass = max(t.linetarget.mass,50.0);
				if ( CountInv("AAAAAAAAA") ) hmass = min(hmass,100.);
				t.linetarget.vel = dir/hmass;
				if ( t.linetarget is 'FlyingRevSkull' )
				{
					t.linetarget.vel.xy *= 1.5;
					t.linetarget.vel.z += 10;
				}
				t.linetarget.bBlasted = true;
			}
		}
		invoker.kikku = false;
	}
	action void A_ThrowWeapon()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		A_StartSound("abortguy/attack",CHAN_VOICE);
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0-10.0*z;
		let p = Spawn("ProjectileWeapon",origin);
		p.angle = angle;
		p.pitch = BulletSlope();
		p.speed *= invoker.throwforce;
		if ( CountInv("AAAAAAAAA") ) p.speed += 30;
		p.mass = invoker.throwmass;
		p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed+vel;
		p.target = self;
		p.scale = weap.scale;
		ProjectileWeapon(p).HeldWeapon = weap.GetClass();
		ProjectileWeapon(p).HeldName = invoker.tname;
		ProjectileWeapon(p).rollfact = invoker.throwforce;
		state SpawnState = player.ReadyWeapon.FindState("Spawn");
		p.sprite = SpawnState.sprite;
		p.frame = SpawnState.frame;
		let w = Spawn("BiggerWhoosh",pos);
		w.target = self;
	}
	action void A_TallLower( int lowerspeed = 6 )
	{
		if ( !player ) return;
		if ( !player.readyweapon )
		{
			player.mo.BringUpWeapon();
			return;
		}
		let psp = player.GetPSprite(PSP_WEAPON);
		if ( player.morphTics || player.cheats&CF_INSTANTWEAPSWITCH )
			psp.y = WEAPONBOTTOM*2;
		else psp.y += lowerspeed;
		if ( psp.y < WEAPONBOTTOM*2 ) return;
		if ( player.playerstate == PST_DEAD )
		{
			player.SetPsprite(PSP_FLASH,null);
			psp.SetState(player.ReadyWeapon.FindState('DeadLowered'));
			return;
		}
		player.SetPsprite(PSP_FLASH,null);
		player.mo.BringUpWeapon();
		return;
	}
	action void A_TallRaise( int raisespeed = 6 )
	{
		if ( !player ) return;
		if ( player.PendingWeapon != WP_NOCHANGE )
		{
			player.mo.DropWeapon();
			return;
		}
		if ( !player.ReadyWeapon ) return;
		let psp = player.GetPSprite(PSP_WEAPON);
		psp.y -= raisespeed;
		if ( psp.y > WEAPONTOP ) return;
		psp.y = WEAPONTOP;
		psp.SetState(player.ReadyWeapon.GetReadyState());
		return;
	}
	States
	{
	Reload:
		#### # 0 { invoker.kick_i = 0; }
	ReloadRaise:
		#### # 1
		{
			A_WeaponOffset(invoker.kickx,invoker.kicky,WOF_ADD|WOF_INTERPOLATE);
			invoker.kick_i++;
		}
		#### # 0 A_JumpIf(invoker.kick_i<invoker.kicktics,"ReloadRaise");
	ReloadHold:
		#### # 10;
		#### # 20
		{
			A_Overlay(PSP_STRIFEHANDS-1,"Kick");
			A_OverlayFlags(PSP_STRIFEHANDS-1,PSPF_ADDWEAPON,false);
		}
		#### # 10
		{
			if ( player&&player.buttons&BT_RELOAD ) return ResolveState("ReloadHold");
			return ResolveState(null);
		}
	ReloadRelease:
		#### # 0 { invoker.kick_i = 0; }
	ReloadLower:
		#### # 1
		{
			A_WeaponOffset(-invoker.kickx,-invoker.kicky,WOF_ADD|WOF_INTERPOLATE);
			invoker.kick_i++;
		}
		#### # 0 A_JumpIf(invoker.kick_i<invoker.kicktics,"ReloadLower");
		#### # 0 { return ResolveState("Ready"); }
		Stop;
	Kick:
		KICK A 0
		{
			A_OverlayOffset(OverlayID(),60,80);
			A_StartSound("abortguy/attack",CHAN_VOICE);
		}
		KICK AAAB 1
		{
			A_Swing(-0.5,0.5,0.1);
			A_OverlayOffset(OverlayID(),-6,-6,WOF_ADD|WOF_INTERPOLATE);
		}
		KICK BB 1
		{
			A_Swing(0.3,-0.8,-0.6);
			A_OverlayOffset(OverlayID(),-8,-4,WOF_ADD|WOF_INTERPOLATE);
		}
		KICK C 0 A_Kick();
		KICK C 1
		{
			A_Swing(0.3,-0.8,-0.6);
			A_OverlayOffset(OverlayID(),-12,-4,WOF_ADD|WOF_INTERPOLATE);
		}
		KICK CCCD 1
		{
			A_Swing(0.6,0.3,-1.1);
			A_OverlayOffset(OverlayID(),-8,4,WOF_ADD|WOF_INTERPOLATE);
		}
		KICK DDEE 1
		{
			A_Swing(0.2,0.6,-0.3);
			A_OverlayOffset(OverlayID(),-6,8,WOF_ADD|WOF_INTERPOLATE);
		}
		KICK EEEE 1
		{
			A_Swing(0.1,0.8,0.1);
			A_OverlayOffset(OverlayID(),-4,16,WOF_ADD|WOF_INTERPOLATE);
		}
		Stop;
	Zoom:
		#### # 0 A_StartSound("abortguy/gruntrev",CHAN_VOICE);
		#### ######## 1
		{
			A_Swing(0,-1,0.5);
			A_WeaponOffset(0,20,WOF_ADD|WOF_INTERPOLATE);
		}
		TNT1 A 10;
		TNT1 A 0 A_ThrowWeapon();
		TNT1 AAAA 1 A_Swing(0,4,-1.0);
		TNT1 A 15;
		TNT1 AAAAAAAA 1 A_Swing(0,-1,0);
		TNT1 A -1 A_TakeInventory(Invoker.GetClass());
		Stop;
	DeadLowered:
		TNT1 A -1 A_ClearOverlays();
		Stop;
	}
}

Class ProjectileWeapon : Actor
{
	Class<Weapon> HeldWeapon;
	String HeldName;
	double rollvel, rollfact;
	int stuckcnt;
	Vector3 lastpos;
	bool hasdispensed;
	Default
	{
		Radius 8;
		Height 8;
		Speed 30;
		DamageFunction (mass!=0x7fffff)?clamp(vel.length()*FRandom[Guns](0.6,1.2),0,100)*(mass/100.):mass;
		BounceType "Doom";
		BounceFactor 0.75;
		PROJECTILE;
		-NOGRAVITY
		+USEBOUNCESTATE
		+BOUNCEONACTORS
		-BOUNCEAUTOOFF
		+BOUNCEAUTOOFFFLOORONLY
		+ROLLSPRITE
		+ROLLCENTER
		+INTERPOLATEANGLES
		Gravity 0.5;
	}
	override String GetObituary( Actor victim, Actor inflictor, Name mod, bool playerattack )
	{
		String loc = StringTable.Localize("$O_WEAPON");
		return String.Format(loc,HeldName);
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		stuckcnt = 0;
		rollvel = FRandom[Guns](50,100)*RandomPick[Guns](-1,1)*(vel.length()/speed)*rollfact;
	}
	action void A_HandleBounce()
	{
		bHITOWNER = true;
		invoker.rollvel = FRandom[Guns](50,100)*RandomPick[Guns](-1,1)*(vel.length()/speed)*invoker.rollfact;
		vel = (vel.unit()+(FRandom[Guns](-0.4,0.4),FRandom[Guns](-0.4,0.4),FRandom[Guns](-0.4,0.4))).unit()*vel.length();
		A_StartSound("guns/bounce",volume:min(1.,vel.length()/speed));
	}
	action void A_DispenseGun()
	{
		if ( invoker.hasdispensed ) return;
		invoker.hasdispensed = true;
		let w = AbortWeapon(Spawn(invoker.HeldWeapon,pos));
		w.AmmoGive1 = 0;
		w.AmmoGive2 = 0;
	}
	override void Tick()
	{
		Super.Tick();
		if ( InStateSequence(CurState,FindState("Death")) ) return;
		roll += rollvel;
		if ( (vel.length()/speed) > 1.0 ) bRIPPER = true;
		else bRIPPER = false;
		if ( (pos ~== lastpos) && (stuckcnt++ > 10) )
		{
			ClearBounce();
			SetStateLabel("Death");
		}
		lastpos = pos;
	}
	override int SpecialMissileHit( Actor victim )
	{
		if ( (victim == target) && bHITOWNER && ((vel.length()/speed) < 0.5) )
		{
			if ( !hasdispensed )
			{
				hasdispensed = true;
				let w = AbortWeapon(Spawn(HeldWeapon,pos));
				w.AmmoGive1 = 0;
				w.AmmoGive2 = 0;
				w.Touch(victim);
			}
			Destroy();
			return 0;
		}
		return -1;
	}
	States
	{
	Spawn:
		#### # 1;
		Wait;
	Bounce:
		#### # 0 A_HandleBounce();
		Goto Spawn;
	Death:
		TNT1 A 1 A_DispenseGun();
		Stop;
	}
}

Class Whoosh : Actor
{
	int cdown;
	double whooshvol;
	Property Volume: whooshvol;
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		Whoosh.Volume 0.35;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		A_StartSound("poke/whoosh",CHAN_BODY,CHANF_LISTENERZ,whooshvol);
		A_StartSound("poke/whoosh",CHAN_7,CHANF_DEFAULT,whooshvol,attenuation:ATTN_NONE);
		cdown = int(ceil(S_GetLength("poke/whoosh")*2));
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		SetOrigin(target.pos+(cos(target.angle),sin(target.angle),0)*16.0,true);
		if ( players[consoleplayer].camera == target )
		{
			A_SoundVolume(CHAN_BODY,0.0);
			A_SoundVolume(CHAN_7,whooshvol);
		}
		else
		{
			A_SoundVolume(CHAN_BODY,whooshvol);
			A_SoundVolume(CHAN_7,0.0);
		}
		if ( cdown-- <= 0 ) Destroy();
	}
}

Class LowerWhoosh : Whoosh
{
	Default
	{
		Whoosh.Volume 0.1;
	}
}

Class BiggerWhoosh : Whoosh
{
	Default
	{
		Whoosh.Volume 1.0;
	}
}
