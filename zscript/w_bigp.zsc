Class BigPea : Pea
{
	Default
	{
		Obituary "$O_BIGP";
		Speed 100;
	}
}

Class BigPee : AbortWeapon
{
	action bool A_FirePee( bool isfast = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return true;
		if ( !isfast )
		{
			if ( weap.Ammo1.Amount <= 0 )
			{
				A_StartSound("pea/empty",CHAN_WEAPON,CHANF_OVERLAP);
				return false;
			}
			if ( !weap.DepleteAmmo(weap.bAltFire,true,1) ) return true;
		}
		A_AlertMonsters(2000);
		A_StartSound("pea/shoot",CHAN_WEAPON,CHANF_OVERLAP);
		A_GunFlash("FlashPee");
		let l = Spawn("FastPistolLight");
		l.target = self;
		Vector3 x, y, z;
		double a, s;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0-10.0*z;
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		int max = isfast?3:1;
		for ( int i=0; i<max; i++ )
		{
			let p = Spawn("BigPea",origin);
			a = FRandom[Pee](0,360);
			s = FRandom[Pee](0,isfast?0.16:0.04);
			Vector3 dir = (x + y*cos(a)*s + z*sin(a)*s).unit();
			p.angle = atan2(dir.y,dir.x);
			p.pitch = -asin(dir.z);
			p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed+vel;
			if ( isfast ) p.vel *= 2.0;
			p.target = self;
		}
		return true;
	}

	action void A_EatPea()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( weap.Ammo2.Amount <= 0 ) return;
		if ( health >= SpawnHealth() ) return;
		if ( !weap.DepleteAmmo(weap.bAltFire,true,1) ) return;
		A_StartSound("pea/eat",CHAN_WEAPON);
		GiveBody(9);
	}

	Default
	{
		Tag "$T_BIGP";
		Inventory.PickupMessage "$I_BIGP";
		Weapon.SlotNumber 4;
		Weapon.SelectionOrder 60;
		Weapon.AmmoGive 60;
		Weapon.AmmoType "Peas";
		Weapon.AmmoType2 "Peas";
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 9;
		AbortWeapon.KickTics 9;
		AbortWeapon.KickX -4;
		AbortWeapon.KickY 3;
		AbortWeapon.ThrowForce 0.6;
		AbortWeapon.ThrowMass 200;
		AbortWeapon.ThrowName "$W_BIGP";
	}
	States
	{
	Spawn:
		PEEP A -1;
		Stop;
	Ready:
		PEEG A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Wait;
	Fire:
		PEEG A 1 A_JumpIf(CountInv("AAAAAAAAA"),"FastFire");
		PEEG AAA 1 A_WeaponOffset(0,-3,WOF_ADD|WOF_INTERPOLATE);
	Hold:
		PEEG A 0 A_JumpIf(!A_FirePee(),"EmptyHold");
		PEEG AAAA 1
		{
			Vector2 dir = (Random[Pee](-2,2),Random[Pee](-2,2));
			A_WeaponOffset(dir.x,23+dir.y);
			A_Swing(dir.x*0.1,dir.y*0.1);
		}
		PEEG A 0 A_WeaponOffset(0,23);
		PEEG A 0 A_JumpIf(CountInv("AAAAAAAAA"),2);
		PEEG A 0 A_Refire();
		PEEG AAA 1 A_WeaponOffset(0,3,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	EmptyHold:
		PEEG A 5;
		PEEG A 0 A_JumpIf(CountInv("AAAAAAAAA"),2);
		PEEG A 0 A_Refire();
		PEEG AAA 1 A_WeaponOffset(0,3,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	AltFire:
		PEEG AAAAA 1 A_WeaponOffset(-3,4,WOF_ADD|WOF_INTERPOLATE);
	AltHold:
		PEEG A 10;
		PEEG A 20 A_EatPea();
		PEEG A 10 A_Refire();
	AltRelease:
		PEEG AAAAA 1 A_WeaponOffset(3,-4,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastFire:
		PEEG A 1 A_WeaponOffset(0,-9,WOF_ADD|WOF_INTERPOLATE);
	FastHold:
		PEEG A 0 A_FirePee(true);
		PEEG AA 1
		{
			Vector2 dir = (Random[Pee](-4,4),Random[Pee](-4,4));
			A_WeaponOffset(dir.x,23+dir.y);
			A_Swing(dir.x*0.03,dir.y*0.03);
		}
		PEEG A 0 A_WeaponOffset(0,23);
		PEEG A 0 A_JumpIf(!CountInv("AAAAAAAAA"),2);
		PEEG A 0 A_Refire("FastHold");
		PEEG A 1 A_WeaponOffset(0,9,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FlashPee:
		PEEF A 1 Bright;
		Stop;
	Select:
		PEEG A 1 A_Raise(12);
		Wait;
	Deselect:
		PEEG A 1 A_Lower(12);
		Wait;
	}
}
