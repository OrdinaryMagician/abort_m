Class BigShotLight : DynamicLight
{
	Default
	{
		DynamicLight.Type "Point";
		ReactionTime 8;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		args[LIGHT_RED] = 255;
		args[LIGHT_GREEN] = 192;
		args[LIGHT_BLUE] = 128;
		args[LIGHT_INTENSITY] = 300;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		SetOrigin(target.vec3Offset(0,0,target.height*0.5),true);
		A_Countdown();
	}
}

Class FlyingGun : Actor
{
	double rollvel;
	int stuckcnt;
	Vector3 lastpos;
	Default
	{
		Obituary "$O_GUNS";
		Radius 4;
		Height 4;
		Speed 40;
		DamageFunction clamp(vel.length()*FRandom[Guns](1.2,2.4),0,200);
		BounceType "Doom";
		BounceFactor 0.65;
		PROJECTILE;
		-NOGRAVITY
		+USEBOUNCESTATE
		+BOUNCEONACTORS
		-BOUNCEAUTOOFF
		+BOUNCEAUTOOFFFLOORONLY
		+ROLLSPRITE
		+ROLLCENTER
		+INTERPOLATEANGLES;
		Scale 0.5;
		Gravity 0.5;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		stuckcnt = 0;
		rollvel = FRandom[Guns](50,100)*RandomPick[Guns](-1,1);
		int decision = Random[Guns](0,7);
		switch ( decision )
		{
		case 0:
			sprite = GetSpriteIndex('CSAW');
			break;
		case 1:
			sprite = GetSpriteIndex('PIST');
			break;
		case 2:
			sprite = GetSpriteIndex('SHOT');
			break;
		case 3:
			// fall back to normal shotgun sprite if no ssg
			if ( TexMan.CheckForTexture("SGNA0",TexMan.Type_Sprite).IsValid() )
				sprite = GetSpriteIndex('SGN2');
			else sprite = GetSpriteIndex('SHOT');
			break;
		case 4:
			sprite = GetSpriteIndex('MGUN');
			break;
		case 5:
			sprite = GetSpriteIndex('LAUN');
			break;
		case 6:
			sprite = GetSpriteIndex('PLAS');
			break;
		case 7:
			sprite = GetSpriteIndex('BFUG');
			break;
		}
	}
	override void Tick()
	{
		Super.Tick();
		if ( InStateSequence(CurState,FindState("Death")) ) return;
		roll += rollvel;
		if ( (vel.length()/speed) > 0.3 ) bRIPPER = true;
		else bRIPPER = false;
		if ( (pos ~== lastpos) && (stuckcnt++ > 10) )
		{
			ClearBounce();
			SetStateLabel("Death");
		}
		lastpos = pos;
	}
	action void A_HandleBounce()
	{
		bHITOWNER = true;
		invoker.rollvel = FRandom[Guns](50,100)*RandomPick[Guns](-1,1)*(vel.length()/speed);
		vel = (vel.unit()+(FRandom[Guns](-0.2,0.2),FRandom[Guns](-0.2,0.2),FRandom[Guns](-0.2,0.2))).unit()*vel.length();
		A_StartSound("guns/bounce",volume:vel.length()/speed);
	}
	States
	{
	Spawn:
		#### A 1;
		Wait;
	Bounce:
		#### A 0 A_HandleBounce();
		Goto Spawn;
	Death:
		#### A 0
		{
			bMOVEWITHSECTOR = true;
			A_SetRoll(Random[Guns](-10,10));
			A_SetTics(Random[Guns](100,300));
		}
		#### A 1
		{
			A_SetScale(scale.x-0.002);
			if ( scale.x <= 0.0 ) Destroy();
		}
		Wait;
	}
}

Class ChunkLight : DynamicLight
{
	Default
	{
		DynamicLight.Type "Point";
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		args[LIGHT_INTENSITY] = 4;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		args[LIGHT_RED] = int(255*target.alpha);
		args[LIGHT_GREEN] = int(224*target.alpha);
		args[LIGHT_BLUE] = int(128*target.alpha);
	}
}

Class ChunkTrail : Actor
{
	Default
	{
		Radius 0.1;
		Height 0;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+INVISIBLE; // temporary until sprite clipping nonsense is fixed
		Scale 0.2;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		let l = Spawn("ChunkLight",pos);
		l.target = self;
	}
	override void Tick()
	{
		Super.Tick();
		if ( InStateSequence(CurState,FindState("Death")) ) return;
		if ( !target )
		{
			SetStateLabel("Death");
			return;
		}
		SetOrigin(target.pos,true);
	}
	States
	{
	Spawn:
		EMBR A 1 Bright;
		Wait;
	Death:
		EMBR A 1 Bright A_FadeOut(0.1);
		Wait;
	}

}

Class GunChunk : Actor
{
	Actor lasthit;
	ChunkTrail trail;
	double rollvel;
	double lifetime, lifespeed;
	int lifetics;
	Default
	{
		Obituary "$O_GUNCHUNKS";
		Radius 2;
		Height 2;
		Speed 30;
		DamageFunction clamp(vel.length()*FRandom[Guns](0.2,0.4),0,100);
		BounceType "Doom";
		BounceFactor 0.75;
		PROJECTILE;
		-NOGRAVITY
		+USEBOUNCESTATE
		-BOUNCEAUTOOFF
		+BOUNCEAUTOOFFFLOORONLY
		+ROLLSPRITE
		+ROLLCENTER
		+INTERPOLATEANGLES
		Scale 0.3;
		Gravity 0.5;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		lifetime = 0;
		lifespeed = FRandom[Guns](0.004,0.008);
		/*trail = ChunkTrail(Spawn("ChunkTrail",pos));
		trail.target = self;*/
		rollvel = FRandom[Guns](50,100)*RandomPick[Guns](-1,1);
		frame = Random[Guns](0,5);
		scale *= Frandom[Junk](0.8,1.2);
	}
	override void Tick()
	{
		static const name tls[] =
		{
			'HotMetal0', 'HotMetal1', 'HotMetal2', 'HotMetal3',
			'HotMetal4', 'HotMetal5', 'HotMetal6', 'HotMetal7'
		};
		Super.Tick();
		lifetime += lifespeed;
		A_SetTranslation(tls[clamp(int(lifetime*10),0,7)]);
		if ( (waterlevel <= 0) && !Random[Guns](0,3) ) A_SpawnParticle("AAAAAA",0,35,2.0,velx:FRandom[Guns](-0.1,0.1),vely:FRandom[Guns](-0.1,0.1),velz:FRandom[Guns](-0.1,0.1),accelz:0.02,startalphaf:scale.x/0.3,sizestep:0.2);
		/*if ( trail ) trail.alpha = max(0,1-lifetime);*/
		if ( InStateSequence(CurState,FindState("Death")) ) return;
		roll += rollvel;
		if ( (vel.length()/speed) > 0.3 ) bRIPPER = true;
		else bRIPPER = false;
	}
	action void A_HandleBounce()
	{
		bHITOWNER = true;
		invoker.rollvel = FRandom[Guns](50,100)*RandomPick[Guns](-1,1)*(vel.length()/speed);
		vel = (vel.unit()+(FRandom[Guns](-0.8,0.8),FRandom[Guns](-0.8,0.8),FRandom[Guns](-0.8,0.8))).unit()*vel.length();
		A_StartSound("guns/cbounce",volume:vel.length()/speed);
	}
	override int SpecialMissileHit( Actor victim )
	{
		if ( victim.bNOBLOOD ) return 1;
		return -1;
	}
	override int DoSpecialDamage( Actor target, int damage, Name damagetype )
	{
		if ( !target.bNOBLOOD )
		{
			if ( target != lasthit ) target.SpawnBlood(pos,AngleTo(target),damage);
			A_StartSound("pellet/meat",volume:0.3,pitch:FRandom[Guns](0.5,1.5));
		}
		lasthit = target;
		return damage;
	}
	States
	{
	Spawn:
		JUNK # 1;
		Wait;
	Bounce:
		JUNK # 0 A_HandleBounce();
		Goto Spawn;
	Death:
		JUNK # 0
		{
			bMOVEWITHSECTOR = true;
			A_SetRoll(RandomPick[Guns](0,180)+Random[Guns](-10,10));
			A_SetTics(Random[Guns](30,50));
		}
		JUNK # 1
		{
			A_SetScale(scale.x-0.002);
			if ( scale.x <= 0.0 ) Destroy();
		}
		Wait;
	Crash:
		TNT1 A 0
		{
			Spawn("BulletPuff",pos);
			A_StartSound("pellet/hit",volume:0.3,pitch:FRandom[Guns](0.5,1.5));
			A_AlertMonsters();
		}
	XDeath:
		TNT1 A 1;
		Stop;
	}
}

Class GunSmoke : Smoke
{
	override void Tick()
	{
		Actor.Tick();
		A_FadeOut(0.003);
		A_SetScale(scale.x*1.01);
		vel *= 0.99;
	}
}

Class GunShotgun : AbortWeapon
{
	int smoketics;

	override void Tick()
	{
		Super.Tick();
		if ( smoketics <= 0 ) return;
		smoketics--;
		// a lot of sanity checks to avoid crashing
		if ( !Owner || !Owner.player || (Owner.player.ReadyWeapon != self)
			|| (Owner.player.playerstate == PST_DEAD) )
			return;
		let psp = Owner.player.GetPSprite(PSP_WEAPON);
		if ( !psp ) return;
		Vector3 x, y, z;
		double ox = 0.1*(psp.x);
		double oy = 0.1*(-32-psp.y);
		[x, y, z] = abort_CoordUtil.GetAxes(Owner.pitch,Owner.angle,Owner.roll);
		Vector3 origin = Owner.Vec2OffsetZ(0,0,Owner.player.viewz)+10.0*x+ox*y+oy*z-Owner.vel;
		for ( int i=0; i<3; i++ )
		{
			let a = Spawn("GunSmoke",origin);
			a.vel.z += FRandom[Guns](0.4,1.2);
			a.vel += x*FRandom[Guns](0.2,0.6)+y*FRandom[Guns](-0.2,0.2);
			a.vel += Owner.vel*0.5;
			a.SetShade(Color(1,1,1)*Random[Guns](0,255));
			a.scale *= FRandom[Guns](0.1,0.3);
			a.alpha *= FRandom[Guns](0.2,0.4)*min(300,smoketics/300.);
		}
	}

	action void A_MrBigShot()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( !CountInv("AAAAAAAAA") )
		{
			if ( weap.Ammo1.Amount <= 0 ) return;
			weap.DepleteAmmo(weap.bAltFire,true,1);
		}
		Vector3 x, y, z;
		double a, s;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+10.0*x;
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		Actor p;
		int max = CountInv("AAAAAAAAA")?30:15;
		for ( int i=0; i<max; i++ )
		{
			p = Spawn("FlyingGun",origin);
			a = FRandom[Guns](0,360);
			s = FRandom[Guns](0,max*0.01);
			Vector3 dir = (x + y*cos(a)*s + z*sin(a)*s).unit();
			p.angle = atan2(dir.y,dir.x);
			p.pitch = -asin(dir.z);
			p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed*FRandom[Pellet](0.5,1.5)+vel;
			if ( CountInv("AAAAAAAAA") ) p.vel *= 2.0;
			p.target = self;
		}
		if ( !abort_mufflegsg )
		{
			A_StartSound("guns/mrbigshot",CHAN_WEAPON,CHANF_OVERLAP,1.0,ATTN_NONE);
			A_StartSound("guns/mrbigshot",CHAN_5,CHANF_OVERLAP,1.0,ATTN_NONE);
			A_StartSound("guns/mrbigshot",CHAN_6,CHANF_OVERLAP,1.0,ATTN_NONE);
			A_StartSound("guns/mrbigshot",CHAN_7,CHANF_OVERLAP,1.0,ATTN_NONE);
		}
		else A_StartSound("guns/mrbigshot",CHAN_WEAPON,CHANF_OVERLAP,0.3,ATTN_NONE);
		A_QuakeEx(9,9,9,50,0,65535,"",QF_SCALEDOWN|QF_RELATIVE,rollIntensity:4);
		A_GunFlash();
		GibeAbort.DoFlash(self,Color(255,255,255),1);
		GibeAbort.DoFlash(self,Color(255,192,128),2);
		GibeAbort.DoFlash(self,Color(255,128,0),4);
		GibeAbort.DoFlash(self,Color(255,0,0),8);
		if ( invoker.smoketics < 200 ) invoker.smoketics += 300;
		else invoker.smoketics = Min(invoker.smoketics+100,900);
		let l = Spawn("BigShotLight");
		l.target = self;
		// alert everyone regardless of distance, blocking or anything
		// this weapon is SO GODDAMN LOUD it can be heard ACROSS THE ENTIRE MAP
		ThinkerIterator t = ThinkerIterator.Create("Actor");
		Actor e;
		while ( e=Actor(t.Next()) ) e.DamageMobj(invoker,self,0,'Hearing');
	}
	action void A_ShakeIt()
	{
		A_QuakeEx(4,4,4,8,0,16,"",QF_SCALEDOWN|QF_RELATIVE,rollIntensity:0.2);
		A_StartSound("guns/shred",CHAN_WEAPON,CHANF_OVERLAP);
		if ( CountInv("AAAAAAAAA") ) A_SetTics(8);
	}
	action void A_FlakIt()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( !CountInv("AAAAAAAAA") )
		{
			if ( weap.Ammo1.Amount <= 0 ) return;
			weap.DepleteAmmo(weap.bAltFire,true,1);
		}
		Vector3 x, y, z;
		double a, s;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+10.0*x;
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		Actor p;
		int max = CountInv("AAAAAAAAA")?200:100;
		for ( int i=0; i<max; i++ )
		{
			p = Spawn("GunChunk",origin);
			a = FRandom[Guns](0,360);
			s = FRandom[Guns](0,max*0.004);
			Vector3 dir = (x + y*cos(a)*s + z*sin(a)*s).unit();
			p.angle = atan2(dir.y,dir.x);
			p.pitch = -asin(dir.z);
			p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed*FRandom[Pellet](0.5,1.5)+vel;
			if ( CountInv("AAAAAAAAA") ) p.vel *= 2.0;
			p.target = self;
		}
		if ( !abort_mufflegsg )
		{
			A_StartSound("guns/mrbigshot",CHAN_WEAPON,CHANF_OVERLAP,0.5,ATTN_NONE);
			A_StartSound("guns/mrbigshot",CHAN_5,CHANF_OVERLAP,0.5,ATTN_NONE);
		}
		else A_StartSound("guns/mrbigshot",CHAN_WEAPON,CHANF_OVERLAP,0.2,ATTN_NONE);
		A_QuakeEx(6,6,6,40,0,65535,"",QF_SCALEDOWN|QF_RELATIVE,falloff:20,rollIntensity:2);
		A_GunFlash();
		GibeAbort.DoFlash(self,Color(255,255,255),1);
		GibeAbort.DoFlash(self,Color(255,192,128),2);
		GibeAbort.DoFlash(self,Color(255,128,0),4);
		GibeAbort.DoFlash(self,Color(255,0,0),8);
		if ( invoker.smoketics < 100 ) invoker.smoketics += 150;
		else invoker.smoketics = Min(invoker.smoketics+50,900);
		let l = Spawn("BigShotLight");
		l.target = self;
		// alert everyone regardless of distance, blocking or anything
		// this weapon is SO GODDAMN LOUD it can be heard ACROSS THE ENTIRE MAP
		ThinkerIterator t = ThinkerIterator.Create("Actor");
		Actor e;
		while ( e=Actor(t.Next()) ) e.DamageMobj(invoker,self,0,'Hearing');
	}
	Default
	{
		Tag "$T_GUNS";
		Inventory.PickupMessage "$I_GUNS";
		Weapon.SlotNumber 3;
		Weapon.SelectionOrder 40;
		Weapon.AmmoGive 32;
		Weapon.AmmoType "Pellets";
		Weapon.AmmoType2 "Pellets";
		Weapon.AmmoUse 4;
		Weapon.MinSelectionAmmo1 4;
		Weapon.AmmoUse2 4;
		AbortWeapon.KickTics 12;
		AbortWeapon.KickX -3;
		AbortWeapon.KickY 2;
		AbortWeapon.ThrowForce 0.4;
		AbortWeapon.ThrowMass 500;
		AbortWeapon.ThrowName "$W_GUNS";
		Scale 1.3;
		+FORCEPAIN;
	}
	States
	{
	Spawn:
		GUNP A -1;
		Stop;
	Ready:
		GUNG A 1
		{
			A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
			A_ZoomFactor(1.0);
		}
		Wait;
	Fire:
		GUNG AAAAAAAAAAAAAAAA 1 A_WeaponOffset(0,-3.5,WOF_ADD|WOF_INTERPOLATE);
	Hold:
		GUNG A 5 { if( CountInv("AAAAAAAAA") ) A_SetTics(1); }
		GUNG A 0 A_JumpIf(CountInv("AAAAAAAAA"),2);
		GUNG A 0 A_JumpIfNoAmmo("Release");
		GUNG A 0 A_MrBigShot();
		GUNG AA 1
		{
			A_WeaponOffset(0,12,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,-3,4);
			else A_Swing(0,-6,8);
			A_ZoomFactor(0.9);
		}
		GUNG AA 1
		{
			A_WeaponOffset(0,8,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,-2,3);
			else A_Swing(0,-4,6);
			A_ZoomFactor(0.8);
		}
		GUNG AA 1
		{
			A_WeaponOffset(0,4,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,-1,2);
			else A_Swing(0,-2,4);
			A_ZoomFactor(0.7);
		}
		GUNG A 12 { if( CountInv("AAAAAAAAA") ) A_SetTics(4); }
		GUNG AAA 1
		{
			A_WeaponOffset(0,-12,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,2);
			else A_Swing(0,4);
			A_ZoomFactor(0.8);
		}
		GUNG AAA 1
		{
			A_WeaponOffset(0,-4,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,2);
			else A_Swing(0,4);
			A_ZoomFactor(0.9);
		}
		GUNG A 5
		{
			if ( CountInv("AAAAAAAAA") ) A_SetTics(1);
			A_ZoomFactor(1.0);
		}
	Release:
		GUNG A 0 A_Refire();
		GUNG AAAAAAAA 1 A_WeaponOffset(0,7,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	AltFire:
		GUNG AAAAAAAA 1 A_WeaponOffset(0,-3.5,WOF_ADD|WOF_INTERPOLATE);
	AltHold:
		GUNG A 2 { if( CountInv("AAAAAAAAA") ) A_SetTics(1); }
		GUNG A 0 A_JumpIf(CountInv("AAAAAAAAA"),2);
		GUNG A 0 A_JumpIfNoAmmo("Release");
		GUNG A 1;
		GUNG AA 1
		{
			A_WeaponOffset(0,6,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,2,0);
		}
		GUNG A 16 A_ShakeIt();
		GUNG AAAA 1
		{
			A_WeaponOffset(0,-3,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-1,0);
		}
		GUNG A 4 { if( CountInv("AAAAAAAAA") ) A_SetTics(2); }
		GUNG A 0 A_FlakIt();
		GUNG AA 1
		{
			A_WeaponOffset(0,12,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,-3,3);
			else A_Swing(0,-6,6);
			A_ZoomFactor(0.9);
		}
		GUNG AA 1
		{
			A_WeaponOffset(0,8,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,-2,2);
			else A_Swing(0,-4,4);
			A_ZoomFactor(0.8);
		}
		GUNG AA 1
		{
			A_WeaponOffset(0,4,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,-1,1);
			else A_Swing(0,-2,2);
			A_ZoomFactor(0.7);
		}
		GUNG A 8 { if( CountInv("AAAAAAAAA") ) A_SetTics(4); }
		GUNG AAA 1
		{
			A_WeaponOffset(0,-12,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,2);
			else A_Swing(0,4);
			A_ZoomFactor(0.8);
		}
		GUNG AAA 1
		{
			A_WeaponOffset(0,-4,WOF_ADD|WOF_INTERPOLATE);
			if ( CountInv("AAAAAAAAA") ) A_Swing(0,2);
			else A_Swing(0,4);
			A_ZoomFactor(0.9);
		}
		GUNG A 2
		{
			if ( CountInv("AAAAAAAAA") ) A_SetTics(1);
			A_ZoomFactor(1.0);
		}
	AltRelease:
		GUNG A 0 A_Refire();
		GUNG AAAA 1 A_WeaponOffset(0,7,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	Flash:
		GUNF ABCD 3 Bright;
		Stop;
	Select:
		GUNG A 1 A_Raise(8);
		Wait;
	Deselect:
		GUNG A 1 A_Lower(8);
		Wait;
	}
}
