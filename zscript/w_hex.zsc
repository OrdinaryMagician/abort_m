Class TileAmmo : Ammo
{
	Default
	{
		Tag "$T_TILEAMMO";
		Inventory.Amount 1;
		Inventory.MaxAmount 4;
		Ammo.BackpackAmount 1;
		Ammo.BackpackMaxAmount 8;
		Inventory.Icon "TILEA0";
	}
}

Class TilePuff : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+PUFFONACTORS;
		+NOEXTREMEDEATH;
		Alpha 0.5;
		Scale 1.5;
		RenderStyle "Translucent";
		SeeSound "tile/hit";
		AttackSound "tile/wall";
	}
	action void A_LesserPuffs()
	{
		for ( int i=0; i<10; i++ ) Spawn("LesserPuff",pos);
	}
	States
	{
	Spawn:
		TNT1 A 1;
		Stop;
	Crash:
		TNT1 AAA 4 A_LesserPuffs();
		Stop;
	}
}

Class TileShuriken : Actor
{
	double phase;
	Vector3 smoothdir;
	Default
	{
		Obituary "$O_TILE";
		Radius 8;
		Height 8;
		Speed 30;
		DamageFunction Random[Tile](1,3)*30;
		PROJECTILE;
		+SKYEXPLODE;
		+FLATSPRITE;
		+ROLLSPRITE;
		-NOGRAVITY;
		+INTERPOLATEANGLES;
		Gravity 0.25;
	}
	override int DoSpecialDamage( Actor target, int damage, Name damagetype )
	{
		if ( !target.bNOBLOOD )
		{
			target.SpawnBlood(pos,AngleTo(target),damage);
			A_StartSound("tile/hit");
		}
		return damage;
	}
	override void Tick()
	{
		Super.Tick();
		Vector3 dir = vel.unit();
		smoothdir = smoothdir*0.95+dir*0.05;
		double ang = atan2(smoothdir.y,smoothdir.x);
		double pt = -asin(smoothdir.z);
		angle = ang;
		pitch = pt;
		roll = phase;
		phase += 30;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		phase = 0;
		smoothdir = vel.unit();
	}
	override int SpecialMissileHit( Actor victim )
	{
		if ( (victim == target) && bHITOWNER && ((vel.length()/speed) < 0.5) )
		{
			let r = AbortWeapon(Spawn("TileWeapon",pos));
			r.Touch(victim);
			Destroy();
			return 0;
		}
		return -1;
	}
	States
	{
	Spawn:
		TILE B 8 A_StartSound("tile/fly",CHAN_AUTO);
		Wait;
	Death:
		TILE B 0
		{
			let s = Spawn("TilePuff",pos);
			s.SetStateLabel("Crash");
			A_StartSound("tile/wall");
		}
		TNT1 A 1
		{
			let t = Spawn("TileWeapon",pos);
			t.angle = angle;
			t.roll = roll;
			t.pitch = pitch;
			t.bNOGRAVITY = true;
		}
		Stop;
	Crash:
		TILE B 0
		{
			let s = Spawn("TilePuff",pos);
			s.SetStateLabel("Crash");
			A_StartSound("tile/wall");
		}
	Death.Sky:
	XDeath:
		TNT1 A 1
		{
			let t = Spawn("TileWeapon",pos);
			t.angle = angle;
		}
		Stop;
	}
}

Class TinyTile : Actor
{
	double spinvel1, spinvel2;
	Vector3 lastpos;
	int stuckcnt;
	Default
	{
		Obituary "$O_TILEFAST";
		Radius 2;
		Height 2;
		Speed 20;
		DamageFunction Random[Tile](1,3)*5;
		BounceType "Doom";
		BounceFactor 0.25;
		PROJECTILE;
		+FLATSPRITE;
		+HITOWNER;
		-NOGRAVITY;
		+BOUNCEONACTORS;
		-BOUNCEAUTOOFF;
		+BOUNCEAUTOOFFFLOORONLY;
		+INTERPOLATEANGLES;
		Scale 0.25;
		Gravity 0.25;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		stuckcnt = 0;
		spinvel1 = FRandom[Tile](20,40)*RandomPick[Tile](1,-1);
		spinvel2 = FRandom[Tile](20,40)*RandomPick[Tile](1,-1);
		SetState(FindState("Spawn")+Random[Tile](0,11));
	}
	override void Tick()
	{
		Super.Tick();
		if ( InStateSequence(CurState,FindState("Death")) ) return;
		angle += spinvel1;
		pitch += spinvel2;
		if ( (pos ~== lastpos) && (stuckcnt++ > 10) )
		{
			ClearBounce();
			SetStateLabel("Death");
		}
		lastpos = pos;
	}
	States
	{
	Spawn:
		TILE BCDEFGHIJKLM -1;
		Stop;
	Death:
		TILE # 1 A_FadeOut();
		Wait;
	}
}

Class SmallTile : Actor
{
	double spinvel1, spinvel2;
	Default
	{
		Obituary "$O_TILEFAST";
		Radius 4;
		Height 4;
		Speed 20;
		DamageFunction Random[Tile](1,3)*10;
		PROJECTILE;
		+FLATSPRITE;
		+HITOWNER;
		-NOGRAVITY;
		+INTERPOLATEANGLES;
		Scale 0.5;
		Gravity 0.25;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		spinvel1 = FRandom[Tile](10,30)*RandomPick[Tile](1,-1);
		spinvel2 = FRandom[Tile](10,30)*RandomPick[Tile](1,-1);
		SetState(ResolveState("Spawn")+Random[Tile](0,11));
	}
	override void Tick()
	{
		Super.Tick();
		angle += spinvel1;
		pitch += spinvel2;
	}
	action void A_BurstIntoTreats()
	{
		double ang, pt;
		for ( int i=0; i<2; i++ )
		{
			let p = Spawn("TinyTile",pos);
			p.angle = FRandom[Tile](0,360);
			p.pitch = FRandom[Tile](-90,90);
			p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed*FRandom[Tile](0.5,1.5);
			p.target = target;
		}
	}
	States
	{
	Spawn:
		TILE BCDEFGHIJKLM -1;
		Stop;
	Death:
		MISL A 0
		{
			A_StartSound("blast/splode",volume:0.5,attenuation:0.5);
			A_Explode(3,8);
			A_AlertMonsters();
			bFLATSPRITE = false;
			bNOGRAVITY = true;
		}
		MISL BBBCCD 1 Bright A_BurstIntoTreats();
		Stop;
	}
}

Class TileClusterBomb : Actor
{
	double spinvel1, spinvel2;
	Default
	{
		Obituary "$O_TILEFAST";
		Radius 8;
		Height 8;
		Speed 50;
		DamageFunction Random[Tile](1,3)*50;
		PROJECTILE;
		+FLATSPRITE;
		-NOGRAVITY;
		+INTERPOLATEANGLES;
		Gravity 0.25;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		spinvel1 = FRandom[Tile](30,60)*RandomPick[Tile](1,-1);
		spinvel2 = FRandom[Tile](30,60)*RandomPick[Tile](1,-1);
	}
	override void Tick()
	{
		Super.Tick();
		angle += spinvel1;
		pitch += spinvel2;
	}
	action void A_BurstIntoTreats()
	{
		double ang, pt;
		for ( int i=0; i<2; i++ )
		{
			let p = Spawn("SmallTile",pos);
			p.angle = FRandom[Tile](0,360);
			p.pitch = FRandom[Tile](-90,90);
			p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed*FRandom[Tile](0.5,1.5);
			p.target = target;
		}
	}
	States
	{
	Spawn:
		TILE B 4 A_StartSound("tile/fly");
		Wait;
	Death:
		MISL A 0
		{
			A_StartSound("blast/splode",attenuation:0.5);
			A_Explode(30,80);
			A_AlertMonsters();
			bFLATSPRITE = false;
			bNOGRAVITY = true;
			for ( int i=0; i<6; i++ ) Spawn("DetonationArm",pos);
		}
		MISL BBBBCCCDD 1 Bright A_BurstIntoTreats();
		Stop;
	}
}

Class TileWeapon : AbortWeapon
{
	action void A_TileHit()
	{
		double ang = angle;
		double pt = AimLineAttack(ang,DEFMELEERANGE);
		int dmg = Random[Tile](4,6)*16;
		Class<Actor> pufftype = "KickPuff";
		if ( CountInv("AAAAAAAAA") ) dmg *= 16;
		if ( LineAttack(ang,DEFMELEERANGE,pt,dmg,'Melee',"TilePuff",LAF_ISMELEEATTACK) )
		{
			A_AlertMonsters(300);
			if ( CountInv("AAAAAAAAA") ) A_QuakeEx(3,3,3,15,0,60,"",QF_RELATIVE|QF_SCALEDOWN,falloff:40);
			else A_QuakeEx(1,1,1,3,0,30,"",QF_RELATIVE|QF_SCALEDOWN,falloff:20);
		}
	}
	action void A_TileThrow()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( weap.Ammo1.Amount <= 0 ) return;
		if ( !weap.DepleteAmmo(weap.bAltFire,true,1) ) return;
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0-4.0*z;
		let p = Spawn("TileShuriken",origin);
		p.angle = angle;
		p.pitch = BulletSlope();
		p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed+vel;
		p.target = self;
	}
	action void A_FastTileThrow()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0-4.0*z;
		let p = Spawn("TileClusterBomb",origin);
		p.angle = angle;
		p.pitch = BulletSlope();
		p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed+vel;
		p.target = self;
	}
	// pick up on use, in case it was thrown high up and the player can't touch it
	override bool Used( Actor user )
	{
		Touch(user);
		return true;
	}
	// fix lack of ammo when dropped by enemies because of some dumb hardcoded behavior
	override bool SpecialDropAction( Actor dropper )
	{
		if ( AmmoGive1 <= 0 ) AmmoGive1 = GetDefaultByType(GetClass()).AmmoGive1;
		return false;
	}
	// disable dropping if it has no ammo
	override Inventory CreateTossable( int amt )
	{
		if ( Ammo1 && (Ammo1.Amount <= 0) ) return null;
		Inventory i = Super.CreateTossable(amt);
		if ( i )
		{
			i.pitch = 0;
			i.roll = 0;
		}
		return i;
	}

	Default
	{
		Tag "$T_TILE";
		Obituary "$O_TILEHIT";
		Inventory.PickupMessage "$I_TILE";
		Weapon.SlotNumber 1;
		Weapon.SelectionOrder 90;
		Weapon.AmmoGive 1;
		Weapon.AmmoType "TileAmmo";
		Weapon.AmmoType2 "TileAmmo";
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		AbortWeapon.KickTics 8;
		AbortWeapon.KickX -6;
		AbortWeapon.KickY 9;
		AbortWeapon.ThrowName "$W_TILE";
		-WEAPON.AMMO_OPTIONAL;
		-WEAPON.ALT_AMMO_OPTIONAL;
		+FLATSPRITE;
	}
	States
	{
	Spawn:
		TILE B -1;
		Stop;
	Ready:
		TILW A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Wait;
	Fire:
		TILW A 0 A_StartSound("abortguy/gruntrev",CHAN_VOICE);
		TILW A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastFire");
		TILW AAAAA 1
		{
			A_WeaponOffset(-20,-15,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(1.5,-1.5,0.1);
		}
	Hold:
		TILW A 1 A_WeaponOffset(-100+FRandom[Tile](-1,1),-43+FRandom[Tile](-1,1),WOF_INTERPOLATE);
		TILW A 0 A_ReFire("Hold");
		TILW A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastHold");
		TILW A 0 A_StartSound("abortguy/attack",CHAN_VOICE);
		TILW A 7 A_WeaponOffset(-100,-43);
		TILW A 0 A_StartSound("tile/miss",CHAN_WEAPON);
		TILW AAA 1
		{
			A_WeaponOffset(40,20,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-1.4,0.6,-0.4);
		}
		TILW A 0 A_TileHit();
		TILW AAA 1
		{
			A_WeaponOffset(30,25,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-1.0,1.0,-0.3);
		}
		TILW AAA 1
		{
			A_WeaponOffset(20,30,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-0.6,1.4,-0.2);
		}
		TILW A 15 A_WeaponOffset(0,272);
		TILW AAAAAAAAAA 1 A_WeaponOffset(0,-24,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastFire:
		TILW BBB 1
		{
			A_WeaponOffset(-40,-30,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(3.0,-3.0,0.2);
		}
		TILW A 0 A_JumpIf(!CountInv("AAAAAAAAA"),"Hold");
	FastHold:
		TILW A 0 A_StartSound("abortguy/attack",CHAN_VOICE);
		TILW A 4 A_WeaponOffset(-120,-58);
		TILW A 0 A_StartSound("tile/miss",CHAN_WEAPON);
		TILW BB 1
		{
			A_WeaponOffset(80,40,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-2.8,1.2,-0.8);
		}
		TILW B 0 A_TileHit();
		TILW BB 1
		{
			A_WeaponOffset(60,50,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-2.0,2.0,-0.6);
		}
		TILW BB 1
		{
			A_WeaponOffset(40,60,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-1.2,2.8,-0.4);
		}
		TILW A 5 A_WeaponOffset(0,272);
		TILW AAAAAAAAAA 1 A_WeaponOffset(0,-24,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	AltFire:
		TILW A 0 A_StartSound("abortguy/gruntrev",CHAN_VOICE);
		TILW A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastAltFire");
		TILW AAAAA 1
		{
			A_WeaponOffset(20,30,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-0.6,1.4,0.2);
		}
	AltHold:
		TILW A 1 A_WeaponOffset(100+FRandom[Tile](-1,1),182+FRandom[Tile](-1,1),WOF_INTERPOLATE);
		TILW A 0 A_ReFire("AltHold");
		TILW A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastAltHold");
		TILW A 10 A_WeaponOffset(100,182);
		TILW A 0 A_StartSound("abortguy/attack",CHAN_VOICE);
		TILW A 10 A_WeaponOffset(100,182);
		TILW A 0 A_StartSound("tile/miss",CHAN_WEAPON);
		TILW C 0 A_WeaponOffset(120,100);
		TILW CCC 1
		{
			A_WeaponOffset(-20,-20,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0.3,-0.8,-0.1);
		}
		TILW C 0 A_TileThrow();
		TILW CCC 1
		{
			A_WeaponOffset(-30,-10,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0.8,-0.3,-0.1);
		}
		TILW CCC 1
		{
			A_WeaponOffset(-40,-5,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(1.2,-0.1,-0.1);
		}
		TILW CCC 1
		{
			A_WeaponOffset(-30,5,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0.6,0.1,-0.1);
		}
		TILW A 0
		{
			if ( invoker.ammo2.amount <= 0 )
			{
				A_WeaponOffset(0,32);
				TakeInventory("TileWeapon",1);
			}
		}
		TILW A 10 A_WeaponOffset(0,272);
		TILW AAAAAAAAAA 1 A_WeaponOffset(0,-24,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastAltFire:
		TILW BBB 1
		{
			A_WeaponOffset(30,40,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-0.8,1.8,0.3);
		}
		TILW A 0 A_JumpIf(!CountInv("AAAAAAAAA"),"AltHold");
	FastAltHold:
		TILW A 4 A_WeaponOffset(90,152);
		TILW A 0 A_StartSound("abortguy/attack",CHAN_VOICE);
		TILW A 4 A_WeaponOffset(90,152);
		TILW A 0 A_StartSound("tile/miss",CHAN_WEAPON);
		TILW C 0 A_WeaponOffset(120,100);
		TILW DD 1
		{
			A_WeaponOffset(-30,-30,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0.3,-0.8,-0.1);
		}
		TILW D 0 A_FastTileThrow();
		TILW DD 1
		{
			A_WeaponOffset(-40,-20,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0.8,-0.3,-0.1);
		}
		TILW DD 1
		{
			A_WeaponOffset(-50,-15,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(1.2,-0.1,-0.1);
		}
		TILW DD 1
		{
			A_WeaponOffset(-40,15,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0.6,0.1,-0.1);
		}
		TILW A 5 A_WeaponOffset(0,272);
		TILW AAAAAAAAAA 1 A_WeaponOffset(0,-24,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	Select:
		TILW A 0 A_WeaponOffset(0,WEAPONBOTTOM*2);
		TILW A 1 A_TallRaise(24);
		Wait;
	Deselect:
		TILW A 1 A_TallLower(24);
		Wait;
	}
}
