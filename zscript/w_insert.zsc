Class LewdDetonation : Actor
{
	Default
	{
		Obituary "$O_LEWD";
		Speed 1;
		+NOBLOCKMAP;
		+NOGRAVITY;
	}
	States
	{
	Spawn:
		TNT1 A 1
		{
			if ( tracer ) A_Warp(AAPTR_TRACER,-tracer.radius,0,tracer.height*0.5,0,WARPF_NOCHECKPOSITION);
			A_Countdown();
		}
		Wait;
	Death:
		TNT1 A 0 A_JumpIf(!tracer||!tracer.bSHOOTABLE,"SilentDeath");
		MISL B 0
		{
			if ( tracer )
			{
				tracer.DamageMobj(self,target,int(clamp(target.SpawnHealth()*0.5,50,200)*speed),'Assblasted');
				tracer.vel.xy += invoker.Vec2To(tracer).unit()*speed*3000/tracer.mass;
				tracer.vel.z += speed*1000/tracer.mass;
			}
			A_Explode(int(10*speed),100);
			A_StartSound("weapons/rocklx");
			for ( int i=0; i<6*speed; i++ ) Spawn("DetonationArm",pos);
		}
		MISL BCD 6 Bright;
		Stop;
	SilentDeath:
		TNT1 A 1;
		Stop;
	}
}

Class DetonationArm : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+THRUACTORS;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS;
		+MISSILE;
		-NOGRAVITY;
		Gravity 0.5;
		BounceFactor 1.0;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		reactiontime = Random[Lewd](4,8);
		double ang, pt;
		ang = FRandom[Lewd](0,360);
		pt = FRandom[Lewd](-90,30);
		vel = (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt))*FRandom[Lewd](4.0,12.0);
	}
	States
	{
	Spawn:
		TNT1 A 1
		{
			A_CountDown();
			Spawn("DetonationTrail",pos+(FRandom[Lewd](-4,4),FRandom[Lewd](-4,4),FRandom[Lewd](-4,4)));
		}
		Wait;
	}
}

Class DetonationTrail : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		Scale 0.3;
	}
	States
	{
	Spawn:
		MISL BCD 2 Bright;
		Stop;
	}
}

Class LewdAmmo : Ammo
{
	Default
	{
		Tag "$T_LEWDAMMO";
		Inventory.PickupMessage "$I_LEWDAMMO";
		Inventory.Amount 1;
		Inventory.MaxAmount 40;
		Ammo.BackpackAmount 10;
		Ammo.BackpackMaxAmount 80;
		Inventory.Icon "FINGB0";
		Scale 0.2;
	}
	States
	{
	Spawn:
		FING B -1;
		Stop;
	}
}

Class LewdAmmoCluster : LewdAmmo
{
	Default
	{
		Tag "$T_LEWDAMMOCLUSTER";
		Inventory.PickupMessage "$I_LEWDAMMOCLUSTER";
		Inventory.Amount 5;
		Scale 0.6;
	}
}

Class Lewd : AbortWeapon
{
	double str;

	action void A_Pop( bool isfast = false, bool isalt = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( isfast ) A_QuakeEx(9,9,9,8,0,80,"",QF_RELATIVE|QF_SCALEDOWN,falloff:60);
		else A_QuakeEx(3,3,3,2,0,30,"",QF_RELATIVE|QF_SCALEDOWN,falloff:20);
		int minammo = isalt?5:1;
		double maxdist = isfast?3000.:600.;
		if ( !isfast && (weap.Ammo1.Amount < minammo) )
		{
			A_AlertMonsters(200);
			A_StartSound("*grunt",CHAN_WEAPON);
			ThinkerIterator ti = ThinkerIterator.Create("Actor");
			Actor a;
			while ( a = Actor(ti.Next()) )
			{
				if ( !IsVisible(a,false) || !a.bSHOOTABLE
					|| (!(a is 'PlayerPawn') && a.bFRIENDLY && !(a is 'Astolfo'))
					|| (a is 'Astolfo' && !deathmatch)
					|| (a is 'Astolfo' && (a.master == self))
					|| (a is 'PlayerPawn' && !deathmatch)
					|| (a is 'SaltTarget')
					|| (a.player && (a.player == player))
					|| (Distance3D(a) > maxdist) )
					continue;
				a.DamageMobj(Invoker,self,0,'Stagger');
			}
			return;
		}
		bool hashit = false;
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		Actor a;
		while ( a = Actor(ti.Next()) )
		{
			if ( !IsVisible(a,false) || !a.bSHOOTABLE
				|| (!(a is 'PlayerPawn') && a.bFRIENDLY && !(a is 'Astolfo'))
				|| (a is 'Astolfo' && !deathmatch)
				|| (a is 'Astolfo' && (a.master == self))
				|| (a is 'PlayerPawn' && !deathmatch)
				|| (a is 'SaltTarget')
				|| (a.player && (a.player == player))
				|| (Distance3D(a) > maxdist) )
				continue;
			hashit = true;
			a.DamageMobj(Invoker,self,0,'Stagger');
			Actor d;
			int max = isalt?isfast?10:5:1;
			int react;
			if ( isfast ) react = Random[Lewd](1,3);
			else react = Random[Lewd](3,9);
			for ( int i=0; i<max; i++ )
			{
				d = Spawn("LewdDetonation",a.pos);
				d.target = self;
				d.tracer = a;
				d.ReactionTime = react;
				if ( isalt )
				{
					d.ReactionTime += i<<(2*isfast);
					d.Speed = 2.0;
					d.Scale *= 1.6;
				}
			}
		}
		if ( hashit )
		{
			A_AlertMonsters(1000);
			A_StartSound("pat/pop",CHAN_WEAPON);
			if ( !isfast ) weap.DepleteAmmo(weap.bAltFire,true,1);
		}
		else
		{
			A_AlertMonsters(200);
			A_StartSound("*grunt",CHAN_WEAPON);
		}
	}
	Default
	{
		Tag "$T_LEWD";
		Obituary "$O_LEWD";
		Inventory.PickupMessage "$I_LEWD";
		Weapon.SlotNumber 5;
		Weapon.SelectionOrder 30;
		Weapon.AmmoGive 5;
		Weapon.AmmoType "LewdAmmo";
		Weapon.AmmoType2 "LewdAmmo";
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 5;
		AbortWeapon.KickTics 7;
		AbortWeapon.KickX 6;
		AbortWeapon.KickY 5;
		AbortWeapon.ThrowName "$W_LEWD";
		+FLOATBOB;
		+FORCEPAIN;
		Scale 0.5;
	}
	States
	{
	Spawn:
		FING A -1;
		Stop;
	Ready:
		LEWD B 1 A_WeaponReady(WRF_ALLOWRELOAD);
		Wait;
	Fire:
		LEWD B 4
		{
			A_Overlay(PSP_WEAPON+1,"Finger");
			A_Overlay(PSP_WEAPON+2,"Cover");
		}
	Hold:
		LEWD B 5 A_JumpIf(CountInv("AAAAAAAAA"),"FastHold");
		LEWD BBBB 1
		{
			A_WeaponOffset(-2,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,25,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 10 A_Pop(false);
		LEWD BBBB 1
		{
			A_WeaponOffset(2,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,-25,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 0 A_Refire();
		LEWD B 5;
		LEWD B 4
		{
			A_Overlay(PSP_WEAPON+1,"FingerDown");
			A_ClearOverlays(PSP_WEAPON+2,PSP_WEAPON+2);
		}
		Goto Ready;
	AltFire:
		LEWD B 4
		{
			A_Overlay(PSP_WEAPON+1,"Finger");
			A_Overlay(PSP_WEAPON+2,"Cover");
		}
	AltHold:
		LEWD B 8 A_JumpIf(CountInv("AAAAAAAAA"),"FastAltHold");
		LEWD B 0
		{
			invoker.str = 0;
			A_StartSound("abortguy/attack",CHAN_VOICE);
		}
		LEWD BBBBBBBBBBBBBBBBBB 1
		{
			invoker.str += 0.2;
			A_OverlayOffset(PSP_WEAPON+1,FRandom[Lewd](-1,1)*invoker.str,FRandom[Lewd](-1,1)*invoker.str);
		}
		LEWD B 4 A_OverlayOffset(PSP_WEAPON+1,0,0);
		LEWD BB 1
		{
			A_WeaponOffset(-4,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,50,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 30 A_Pop(false,true);
		LEWD BBBBBBBB 1
		{
			A_WeaponOffset(1,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,-12.5,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 0 A_Refire();
		LEWD B 6;
		LEWD B 4
		{
			A_Overlay(PSP_WEAPON+1,"FingerDown");
			A_ClearOverlays(PSP_WEAPON+2,PSP_WEAPON+2);
		}
		Goto Ready;
	FastHold:
		LEWD B 2;
		LEWD B 0
		{
			A_Overlay(PSP_WEAPON+1,"FastFingerIn");
			let w = Spawn("Whoosh");
			w.target = self;
		}
		LEWD BB 1
		{
			A_WeaponOffset(-8,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,50,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 2
		{
			A_Pop(true);
			A_Overlay(PSP_WEAPON+1,"FingerIn");
		}
		LEWD B 0
		{
			A_Overlay(PSP_WEAPON+1,"FastFingerOut");
			let w = Spawn("Whoosh");
			w.target = self;
		}
		LEWD BB 1
		{
			A_WeaponOffset(8,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,-50,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 0
		{
			if ( !CountInv("AAAAAAAAA") )
				A_Overlay(PSP_WEAPON+1,"FingerReady");
			A_Refire();
		}
		LEWD B 2;
		LEWD B 4
		{
			A_Overlay(PSP_WEAPON+1,"FingerDown");
			A_ClearOverlays(PSP_WEAPON+2,PSP_WEAPON+2);
		}
		Goto Ready;
	FastAltHold:
		LEWD B 2;
		LEWD B 0
		{
			invoker.str = 0;
			A_StartSound("abortguy/attack",CHAN_VOICE);
			A_Overlay(PSP_WEAPON+1,"FingerReady");
		}
		LEWD BBBBBBBBB 1
		{
			invoker.str += 0.8;
			A_OverlayOffset(PSP_WEAPON+1,FRandom[Lewd](-1,1)*invoker.str,FRandom[Lewd](-1,1)*invoker.str);
		}
		LEWD B 2
		{
			A_OverlayOffset(PSP_WEAPON+1,0,0);
			A_Overlay(PSP_WEAPON+1,"FastFingerIn");
		}
		LEWD B 0
		{
			let w = Spawn("Whoosh");
			w.target = self;
		}
		LEWD B 1
		{
			A_WeaponOffset(-16,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,100,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 8
		{
			A_Pop(true,true);
			A_Overlay(PSP_WEAPON+1,"FingerIn");
		}
		LEWD BBBB 1
		{
			A_WeaponOffset(4,0,WOF_ADD|WOF_INTERPOLATE);
			A_OverlayOffset(PSP_WEAPON+1,-25,0,WOF_ADD|WOF_INTERPOLATE);
		}
		LEWD B 0
		{
			if ( !CountInv("AAAAAAAAA") )
				A_Overlay(PSP_WEAPON+1,"FingerReady");
			A_Refire();
		}
		LEWD B 4;
		LEWD B 4
		{
			A_Overlay(PSP_WEAPON+1,"FingerDown");
			A_ClearOverlays(PSP_WEAPON+2,PSP_WEAPON+2);
		}
		Goto Ready;
	Finger:
		LEWD A 0 A_OverlayOffset(PSP_WEAPON+1,32,48);
		LEWD AAAA 1 A_OverlayOffset(PSP_WEAPON+1,-8,-12,WOF_ADD|WOF_INTERPOLATE);
	FingerReady:
		LEWD A 1;
		Wait;
	FastFingerIn:
		LEWD D 1;
		Wait;
	FastFingerOut:
		LEWD D 0 A_OverlayOffset(PSP_WEAPON+1,100,0);
		LEWD D 1;
		Wait;
	FingerIn:
		LEWD A 0 A_OverlayOffset(PSP_WEAPON+1,100,0);
		LEWD A 1;
		Wait;
	FingerDown:
		LEWD AAAA 1 A_OverlayOffset(PSP_WEAPON+1,8,12,WOF_ADD|WOF_INTERPOLATE);
		Stop;
	Cover:
		LEWD C 1;
		Wait;
	Select:
		LEWD B 1 A_Raise(12);
		Wait;
	Deselect:
		LEWD B 1 A_Lower(12);
		Wait;
	}
}
