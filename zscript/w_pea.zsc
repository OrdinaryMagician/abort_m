Class Peas : Ammo
{
	Default
	{
		Tag "$T_PEAS";
		Inventory.PickupMessage "$I_PEAS";
		Inventory.Amount 3;
		Inventory.MaxAmount 240;
		Ammo.BackpackAmount 60;
		Ammo.BackpackMaxAmount 480;
		Ammo.DropAmount 3;
		Inventory.Icon "PESSB0";
		Scale 0.5;
	}
	States
	{
	Spawn:
		PESS A -1;
		Stop;
	}
}

Class PeaBox : Peas
{
	Default
	{
		Tag "$T_PEABOX";
		Inventory.PickupMessage "$I_PEABOX";
		Inventory.Amount 30;
	}
	States
	{
	Spawn:
		PESS B -1;
		Stop;
	}
}

Class Pea : Actor
{
	bool hasbounced;
	int stuckcnt;
	Vector3 lastpos;
	Default
	{
		Obituary "$O_PEAS";
		Radius 2;
		Height 2;
		Speed 50;
		DamageFunction Random[Pea](2,5)*3;
		DamageType 'Peashot';
		BounceType "Doom";
		BounceFactor 0.5;
		PROJECTILE;
		+USEBOUNCESTATE
		+BOUNCEONACTORS
		-BOUNCEAUTOOFF
		+BOUNCEAUTOOFFFLOORONLY
		+FORCEXYBILLBOARD
		Scale 0.5;
	}
	override int SpecialMissileHit( Actor victim )
	{
		return hasbounced?1:-1;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		hasbounced = false;
		stuckcnt = 0;
	}
	override void Tick()
	{
		Super.Tick();
		if ( InStateSequence(CurState,FindState("Death")) ) return;
		if ( (pos ~== lastpos) && (stuckcnt++ > 10) )
		{
			ClearBounce();
			SetStateLabel("Death");
		}
		lastpos = pos;
	}
	action void A_HandleBounce()
	{
		bHITOWNER = true;
		// dramatically slow down on first bounce
		if ( !invoker.hasbounced ) vel = vel.unit()*8;
		invoker.hasbounced = true;
		bNOGRAVITY = false;
		vel = (vel.unit()+(FRandom[Pea](-0.4,0.4),FRandom[Pea](-0.4,0.4),FRandom[Pea](-0.4,0.4))).unit()*vel.length();
	}
	States
	{
	Spawn:
		PEA_ A -1;
		Stop;
	Bounce:
		PEA_ A 0 A_HandleBounce();
		Goto Spawn;
	Death:
		PEA_ A 0
		{
			bMOVEWITHSECTOR = true;
			A_SetTics(Random[Pea](900,3000));
		}
		Stop;
	}
}

Class PistolLight : DynamicLight
{
	Default
	{
		DynamicLight.Type "Point";
		args 255, 224, 192, 200;
		ReactionTime 5;
	}
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		SetOrigin(target.vec3Offset(0,0,target.height*0.5),true);
		A_Countdown();
	}
}

Class FastPistolLight : PistolLight
{
	Default
	{
		ReactionTime 2;
	}
}

const GUN_MAX = 100;

Class PeaShooter : AbortWeapon
{
	int gunused[GUN_MAX];
	int guncount;

	action bool A_PeaShot()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return true;
		if ( weap.Ammo1.Amount <= 0 )
		{
			A_StartSound("pea/empty",CHAN_WEAPON,CHANF_OVERLAP);
			return false;
		}
		if ( !weap.DepleteAmmo(weap.bAltFire,true,1) ) return true;
		A_AlertMonsters(2000);
		A_StartSound("pea/shoot",CHAN_WEAPON,CHANF_OVERLAP,0.5);
		A_Overlay(PSP_FLASH,"Flashme");
		let l = Spawn("PistolLight");
		l.target = self;
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0-4.0*z;
		let p = Spawn("Pea",origin);
		p.angle = angle;
		p.pitch = BulletSlope();
		p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed+vel;
		p.target = self;
		return true;
	}
	action void A_FastShot()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		A_AlertMonsters(2000);
		A_StartSound("pea/shoot",CHAN_WEAPON,CHANF_OVERLAP,0.5);
		A_Overlay(OverlayID()+1,"Flashme");
		A_Swing(-0.002*OverlayX(OverlayID())*invoker.gunused[(OverlayID()-PSP_WEAPON)/2],FRandom[Pea](-0.2,0.2),0.05);
		if ( invoker.gunused[(OverlayID()-PSP_WEAPON)/2] == -1 )
			A_OverlayFlags(OverlayID()+1,PSPF_FLIP|PSPF_MIRROR,true);
		A_OverlayOffset(OverlayID()+1,OverlayX(),OverlayY());
		let l = Spawn("FastPistolLight");
		l.target = self;
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		double ox, oy;
		ox = 0.10*(OverlayX(OverlayID())*invoker.gunused[(OverlayID()-PSP_WEAPON)/2]);
		oy = 0.05*(-30-OverlayY(OverlayID()))-4.0;
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0+y*ox+z*oy;
		let p = Spawn("Pea",origin);
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		Vector3 dir = (x + y*(FRandom[Pea](-0.1,0.1)+(OverlayX(OverlayID())*invoker.gunused[(OverlayID()-PSP_WEAPON)/2])*0.005) + z*FRandom[Pea](-0.1,0.1)).unit();
		p.angle = atan2(dir.y,dir.x);
		p.pitch = -asin(dir.z);
		p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed+vel;
		p.target = self;
	}
	action void A_EatPea()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( weap.Ammo2.Amount <= 0 ) return;
		if ( health >= SpawnHealth() ) return;
		if ( !weap.DepleteAmmo(weap.bAltFire,true,1) ) return;
		A_StartSound("pea/eat",CHAN_WEAPON);
		GiveBody(3);
	}
	Default
	{
		Tag "$T_PEASHOOTER";
		Inventory.PickupMessage "$I_PEASHOOTER";
		Weapon.SlotNumber 2;
		Weapon.SelectionOrder 80;
		Weapon.AmmoGive 30;
		Weapon.AmmoType "Peas";
		Weapon.AmmoType2 "Peas";
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 3;
		AbortWeapon.KickTics 6;
		AbortWeapon.KickX -4;
		AbortWeapon.KickY 3;
		AbortWeapon.ThrowForce 1.2;
		AbortWeapon.ThrowMass 20;
		AbortWeapon.ThrowName "$W_PEASHOOTER";
	}
	States
	{
	Spawn:
		PIST A -1;
		Stop;
	Ready:
		PEAP A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Wait;
	Fire:
		PEAP A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastFire");
		PEAP A 1;
		PEAP B 0 A_JumpIf(!A_PeaShot(),"EmptyFire");
		PEAP BBB 1 A_Swing(0,-0.05);
		PEAP CCDD 1 A_Swing(0,-0.01);
		PEAP EEEE 1 A_Swing(0,-0.005);
		PEAP DC 1 A_Swing(0,0.1);
		PEAP B 1 A_Swing(0,0.01);
		Goto Ready;
	AltFire:
		PEAP AAA 1 A_WeaponOffset(-4,6,WOF_ADD|WOF_INTERPOLATE);
	AltHold:
		PEAP A 10;
		PEAP A 10 A_EatPea();
		PEAP A 10 A_Refire();
	AltRelease:
		PEAP AAA 1 A_WeaponOffset(4,-6,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	EmptyFire:
		PEAP A 10;
		Goto Ready;
	FastFire:
		PEAP AAAAAA 1 A_WeaponOffset(0,12,WOF_ADD|WOF_INTERPOLATE);
	FastHold:
		TNT1 A 1
		{
			A_WeaponOffset(0,32);
			for ( int j=0; j<4; j++ )
			{
				int slot = 0;
				for ( int i=1; i<GUN_MAX; i++ ) if ( invoker.gunused[i] == 0 ) slot = i;
				if ( slot > 0 )
				{
					invoker.guncount++;
					A_Overlay(PSP_WEAPON+slot*2,"FastPistol");
					if ( Random[Pea](0,1) )
					{
						A_OverlayFlags(PSP_WEAPON+slot*2,PSPF_FLIP|PSPF_MIRROR,true);
						invoker.gunused[slot] = -1;
					}
					else invoker.gunused[slot] = 1;
				}
			}
		}
	FastRelease:
		TNT1 A 1 { if ( CountInv("AAAAAAAAA") ) A_Refire("FastHold"); }
		TNT1 A 1 A_JumpIf(Invoker.guncount>0,"FastRelease");
		PEAP A 0 A_WeaponOffset(0,104);
		PEAP AAAAAA 1 A_WeaponOffset(0,-12,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastPistol:
		PEAP A 0
		{
			double xofs = FRandom[Pea](-200,200);
			double yofs = 90*(abs(xofs)/200.0) + 60*(1.0-abs(xofs)/200.0);
			A_OverlayOffset(OverlayID(),xofs+FRandom[Pea](-20,20),yofs+FRandom[Pea](0,10));
			let w = Spawn("LowerWhoosh");
			w.target = self;
			A_SetTics(Random[Pea](0,4));
		}
		PEFP AAA 1 A_OverlayOffset(OverlayID(),0,-24,WOF_ADD|WOF_INTERPOLATE);
		PEAP A 4;
		PEAP B 0 A_FastShot();
		PEAP BCD 1;
		PEAP E 3;
		PEAP D 2;
		PEAP B 1;
		PEFP A 0
		{
			let w = Spawn("LowerWhoosh");
			w.target = self;
		}
		PEFP AAA 1 A_OverlayOffset(OverlayID(),0,24,WOF_ADD|WOF_INTERPOLATE);
		PEAP A 0 { invoker.gunused[(OverlayID()-PSP_WEAPON)/2] = 0; invoker.guncount--; }
		Stop;
	FastFlash:
		PEAF A 1 Bright;
		Stop;
	Flashme:
		PEAF A 3 Bright;
		Stop;
	Select:
		PEAP A 0 { invoker.guncount = 0; for ( int i=0; i<GUN_MAX; i++ ) invoker.gunused[i] = 0; }
		PEAP A 1 A_Raise(12);
		Wait;
	Deselect:
		PEAP A 0 { invoker.guncount = 0; for ( int i=0; i<GUN_MAX; i++ ) invoker.gunused[i] = 0; }
		PEAP A 1 A_Lower(12);
		Wait;
	}
}
