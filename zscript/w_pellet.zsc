Class Pellets : Ammo
{
	Default
	{
		Tag "$T_PELLETS";
		Inventory.PickupMessage "$I_PELLETS";
		Inventory.Amount 4;
		Inventory.MaxAmount 64;
		Ammo.BackpackAmount 16;
		Ammo.BackpackMaxAmount 128;
		Ammo.DropAmount 4;
		Inventory.Icon "PELLA0";
		Scale 0.4;
	}
	States
	{
	Spawn:
		PELL A -1;
		Stop;
	}
}

Class PelletsBig : Pellets
{
	Default
	{
		Tag "$T_PELLETSBIG";
		Inventory.PickupMessage "$I_PELLETSBIG";
		Inventory.Amount 8;
		Scale 0.8;
	}
}

Class Pellet : FastProjectile
{
	Default
	{
		Obituary "$O_PELLET";
		Radius 4;
		Height 4;
		Speed 120;
		DamageFunction Random[Pellet](1,3)*2;
		+FORCEXYBILLBOARD;
		Scale 0.2;
	}
	override void Tick()
	{
		if ( InStateSequence(CurState,FindState("Spawn")) ) Vel.z -= 0.25;
		Super.Tick();
	}
	override int DoSpecialDamage( Actor target, int damage, Name damagetype )
	{
		if ( !target.bNOBLOOD )
		{
			target.SpawnBlood(pos,AngleTo(target),damage);
			A_StartSound("pellet/meat",volume:0.3,pitch:FRandom[Pellet](0.5,2.0));
		}
		return damage;
	}
	States
	{
	Spawn:
		PELS A -1;
		Stop;
	Death:
	Crash:
		TNT1 A 0
		{
			Spawn("BulletPuff",pos);
			A_StartSound("pellet/hit",volume:0.3,pitch:FRandom[Pellet](0.5,2.0));
			A_AlertMonsters();
		}
	XDeath:
		TNT1 A 1;
		Stop;
	}
}

Class PelletBox : Actor
{
	double rollvel;
	Default
	{
		Obituary "$O_PELLETFAST";
		Radius 8;
		Height 8;
		Speed 50;
		DamageFunction Random[Pellet](1,3)*30;
		PROJECTILE;
		-NOGRAVITY;
		+FORCEXYBILLBOARD;
		+ROLLSPRITE;
		+ROLLCENTER;
		+INTERPOLATEANGLES;
		Scale 0.7;
		Gravity 0.25;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		rollvel = FRandom[Pellet](90,120)*RandomPick[Pellet](-1,1);
	}
	States
	{
	Spawn:
		PELL B 1 A_SetRoll(roll+invoker.rollvel);
		Wait;
	Death:
		MISL A 0
		{
			A_StartSound("pellet/explode",attenuation:0.25);
			A_Explode(40,120);
			A_AlertMonsters();
			bNOGRAVITY = true;
			bROLLSPRITE = false;
			for ( int i=0; i<6; i++ ) Spawn("DetonationArm",pos);
		}
		MISL BBBBCCCDD 1 Bright
		{
			double ang, pt;
			for ( int i=0; i<8; i++ )
			{
				let p = Spawn("Pellet",pos);
				ang = FRandom[Pellet](0,360);
				pt = FRandom[Pellet](-90,90);
				p.angle = ang;
				p.pitch = pt;
				p.vel = (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt))*p.speed*FRandom[Pellet](0.5,1.5);
				p.target = target;
				p.bHITOWNER = true;
			}
		}
		Stop;
	}
}

Class BoxOfPellets : AbortWeapon
{
	bool leftside, rightside;

	action bool A_ConsumePellets()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return false;
		if ( weap.Ammo1.Amount <= 0 ) return true;
		weap.DepleteAmmo(weap.bAltFire,true,1);
		A_StartSound("pellet/grab",CHAN_WEAPON);
		return false;
	}
	action void A_ThrowPellets( bool rapid = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		Vector3 x, y, z;
		double a, s;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+10.0*x;
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		Actor p;
		int max = CountInv("AAAAAAAAA")?90:30;
		for ( int i=0; i<max; i++ )
		{
			p = Spawn("Pellet",origin);
			a = FRandom[Pellet](0,360);
			s = FRandom[Pellet](0,CountInv("AAAAAAAAA")?1.28:rapid?0.48:0.16);
			Vector3 dir = (x + y*cos(a)*s + z*sin(a)*s*0.5).unit();
			p.angle = atan2(dir.y,dir.x);
			p.pitch = -asin(dir.z);
			p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed*FRandom[Pellet](0.5,1.5)+vel;
			if ( CountInv("AAAAAAAAA") ) p.vel *= 2;
			p.target = self;
		}
	}
	action void A_ThrowBox()
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		int tdir = (OverlayID()==PSP_WEAPON+2)?-1:1;
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		double ox, oy;
		ox = 0.05*(80+OverlayX(OverlayID()))*tdir;
		oy = 0.02*(-30-OverlayY(OverlayID()));
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+10.0*x+ox*y+oy*z;
		A_Swing(-0.1*OverlayX(OverlayID())*tdir,FRandom[Pellet](-0.2,0.2),-0.1);
		A_StartSound("pellet/throwbox",CHAN_WEAPON,CHANF_OVERLAP);
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		let p = Spawn("PelletBox",origin);
		Vector3 dir = (x + y*(FRandom[Pellet](-0.05,0.05)-0.05*tdir) + z*FRandom[Pellet](-0.05,0.05)).unit();
		p.angle = atan2(dir.y,dir.x);
		p.pitch = -asin(dir.z);
		p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed*FRandom[Pellet](0.5,1.5)+vel;
		p.target = self;
	}
	Default
	{
		Tag "$T_PELLETBOX";
		Inventory.PickupMessage "$I_PELLETBOX";
		Weapon.SlotNumber 3;
		Weapon.SelectionOrder 70;
		Weapon.AmmoGive 12;
		Weapon.AmmoType "Pellets";
		Weapon.AmmoType2 "Pellets";
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 1;
		AbortWeapon.KickTics 6;
		AbortWeapon.KickX -6;
		AbortWeapon.KickY 10;
		AbortWeapon.ThrowForce 0.7;
		AbortWeapon.ThrowMass 50;
		AbortWeapon.ThrowName "$W_PELLETBOX";
		Scale 0.7;
	}
	States
	{
	Spawn:
		PELL B -1;
		Stop;
	Ready:
		PELB A 0
		{
			if ( !CountInv("AAAAAAAAA") && (Weapon(Invoker).Ammo1.Amount <= 0) )
				return ResolveState("Ready")+2;
			return ResolveState(null);
		}
		PELB A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Goto Ready;
		PELB E 1 A_WeaponReady(WRF_NOFIRE|WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Goto Ready;
	Fire:
		PELB A 1 A_JumpIf(CountInv("AAAAAAAAA"),"FastFire");
		PELB AAAAAA 1 A_WeaponOffset(8,12,WOF_ADD|WOF_INTERPOLATE);
	Hold:
		TNT1 A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastHold");
		TNT1 A 0 A_WeaponOffset(60,80);
		TNT1 A 15 A_JumpIf(A_ConsumePellets(),"EmptyRelease");
	Hold2:
		TNT1 A 1 A_JumpIf(CountInv("AAAAAAAAA"),"FastHold");
		TNT1 A 0 A_ReFire("Hold2");
		PELB BBBB 1 A_WeaponOffset(-8,-12,WOF_ADD|WOF_INTERPOLATE);
		PELB B 0
		{
			let w = Spawn("Whoosh");
			w.target = self;
		}
		PELB BC 1 A_WeaponOffset(-16,-8,WOF_ADD|WOF_INTERPOLATE);
		PELB C 0 A_ThrowPellets();
		PELB CC 1 A_WeaponOffset(-16,-8,WOF_ADD|WOF_INTERPOLATE);
		PELB CCDD 1 A_WeaponOffset(-12,16,WOF_ADD|WOF_INTERPOLATE);
		TNT1 A 10;
		TNT1 A 0 A_Refire("Hold");
	Release:
		TNT1 A 0 A_WeaponOffset(48,104);
		PELB AAAAAA 1 A_WeaponOffset(-8,-12,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	EmptyRelease:
		TNT1 A 0 A_WeaponOffset(48,104);
		PELB EEEEEE 1 A_WeaponOffset(-8,-12,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastFire:
		PELF A 0
		{
			invoker.leftside = false;
			invoker.rightside = false;
		}
		PELF AAA 1 A_WeaponOffset(0,16,WOF_ADD|WOF_INTERPOLATE);
	FastHold:
		TNT1 A 3
		{
			A_WeaponOffset(0,32);
			if ( !invoker.rightside )
			{
				invoker.rightside = true;
				A_Overlay(PSP_WEAPON+1,"BoxThrow");
			}
			else if ( !invoker.leftside )
			{
				invoker.leftside = true;
				A_Overlay(PSP_WEAPON+2,"BoxThrow");
				A_OverlayFlags(PSP_WEAPON+2,PSPF_FLIP|PSPF_MIRROR,true);
			}
		}
		TNT1 A 0 A_Refire();
	FastWait:
		TNT1 A 1;
		TNT1 A 0 A_JumpIf(invoker.rightside||invoker.leftside,"FastWait");
		TNT1 A 0
		{
			let w = Spawn("Whoosh");
			w.target = self;
		}
	FastRelease:
		TNT1 A 0 A_JumpIf(!CountInv("AAAAAAAAA"),"Release");
		TNT1 A 0 A_WeaponOffset(0,80);
		PELF AAA 1 A_WeaponOffset(0,-16,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	AltFire:
		PELB A 1 A_JumpIf(CountInv("AAAAAAAAA"),"FastAltFire");
		PELB AAAAAA 1 A_WeaponOffset(8,12,WOF_ADD|WOF_INTERPOLATE);
	AltHold:
		TNT1 A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastAltHold");
		TNT1 A 0 A_WeaponOffset(60,80);
		TNT1 A 5 A_JumpIf(A_ConsumePellets(),"EmptyRelease");
		PELB BBBB 1 A_WeaponOffset(-8,-12,WOF_ADD|WOF_INTERPOLATE);
		PELB B 0
		{
			let w = Spawn("Whoosh");
			w.target = self;
		}
		PELB BC 1 A_WeaponOffset(-16,-8,WOF_ADD|WOF_INTERPOLATE);
		PELB C 0 A_ThrowPellets(true);
		PELB CC 1 A_WeaponOffset(-16,-8,WOF_ADD|WOF_INTERPOLATE);
		PELB CCDD 1 A_WeaponOffset(-12,16,WOF_ADD|WOF_INTERPOLATE);
		TNT1 A 5;
		TNT1 A 0 A_Refire();
		Goto Release;
	FastAltFire:
		PELF AAA 1 A_WeaponOffset(0,16,WOF_ADD|WOF_INTERPOLATE);
	FastAltHold:
		TNT1 A 0 A_JumpIf(!CountInv("AAAAAAAAA"),"FastHold");
		TNT1 A 0 A_WeaponOffset(60,80);
		TNT1 A 1 A_StartSound("pellet/grab",CHAN_WEAPON);
		PELF BB 1 A_WeaponOffset(-16,-24,WOF_ADD|WOF_INTERPOLATE);
		PELF B 0
		{
			let w = Spawn("Whoosh");
			w.target = self;
		}
		PELF C 1 A_WeaponOffset(-32,-16,WOF_ADD|WOF_INTERPOLATE);
		PELF C 0 A_ThrowPellets(true);
		PELF C 1 A_WeaponOffset(-32,-16,WOF_ADD|WOF_INTERPOLATE);
		PELF DD 1 A_WeaponOffset(-24,32,WOF_ADD|WOF_INTERPOLATE);
		TNT1 A 1;
		TNT1 A 0 A_Refire("FastAltHold");
		Goto FastRelease;
	BoxThrow:
		TNT1 A 0 A_OverlayOffset(OverlayID(),60+FRandom[Pellet](-10,10),80+FRandom[Pellet](-10,10));
		PELF BB 1 A_OverlayOffset(OverlayID(),-16,-24,WOF_ADD|WOF_INTERPOLATE);
		PELF B 0
		{
			let w = Spawn("Whoosh");
			w.target = self;
		}
		PELF C 1 A_OverlayOffset(OverlayID(),-32,-16,WOF_ADD|WOF_INTERPOLATE);
		PELF C 0 A_ThrowBox();
		PELF C 1 A_OverlayOffset(OverlayID(),-32,-16,WOF_ADD|WOF_INTERPOLATE);
		PELF DD 1 A_OverlayOffset(OverlayID(),-24,48,WOF_ADD|WOF_INTERPOLATE);
		PELF D 0
		{
			if ( OverlayID()==PSP_WEAPON+2 ) invoker.leftside = false;
			else invoker.rightside = false;
		}
		Stop;
	Select:
		PELB A 0
		{
			if ( !CountInv("AAAAAAAAA") && (Weapon(Invoker).Ammo1.Amount <= 0) )
				return ResolveState("Select")+2;
			return ResolveState(null);
		}
		PELB A 1 A_Raise(12);
		Wait;
		PELB E 1 A_Raise(12);
		Wait;
	Deselect:
		PELB A 0
		{
			if ( !CountInv("AAAAAAAAA") && (Weapon(Invoker).Ammo1.Amount <= 0) )
				return ResolveState("Deselect")+2;
			return ResolveState(null);
		}
		PELB A 1 A_Lower(12);
		Wait;
		PELB E 1 A_Lower(12);
		Wait;
	}
}
