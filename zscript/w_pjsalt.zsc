Class SaltLight : PistolLight
{
	Default
	{
		args 160, 255, 212, 100;
		ReactionTime 3;
	}
}

Class SaltCasing : Actor
{
	int deadtimer;
	double rollvel;

	Default
	{
		Radius 2;
		Height 1;
		+NOBLOCKMAP;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		+MISSILE;
		+MOVEWITHSECTOR;
		+THRUACTORS;
		BounceType "Doom";
		BounceFactor 0.5;
		BounceSound "salt/shell";
		Scale 0.12;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		deadtimer = 0;
		rollvel = FRandom[Junk](20,80)*RandomPick[Junk](-1,1);
	}
	override void Tick()
	{
		Super.Tick();
		if ( isFrozen() ) return;
		if ( InStateSequence(CurState,ResolveState("Death")) )
		{
			deadtimer++;
			if ( deadtimer > 300 ) A_FadeOut(0.05);
			return;
		}
	}
	States
	{
	Spawn:
		PCAS A 2 A_SetRoll(roll+rollvel);
		Loop;
	Bounce:
		PCAS A 0 { rollvel = FRandom[Junk](10,30)*RandomPick[Junk](-1,1); }
		Goto Spawn;
	Death:
		PCAS A -1 A_SetRoll(FRandom[Junk](-5,5)+RandomPick[Junk](0,180));
		Stop;
	}
}

Class SaltBulletTracer : LineTracer
{
	Actor owner, ignore;

	override ETraceStatus TraceCallback()
	{
		if ( Results.HitType == TRACE_HitActor )
		{
			if ( (Results.HitActor == owner) || (Results.HitActor == ignore) ) return TRACE_Skip;
			if ( Results.HitActor.bSHOOTABLE ) return TRACE_Stop;
			return TRACE_Skip;
		}
		else if ( (Results.HitType == TRACE_HitWall) && (Results.Tier == TIER_Middle) )
		{
			if ( !Results.HitLine.sidedef[1] || (Results.HitLine.Flags&(Line.ML_BlockHitscan|Line.ML_BlockEverything)) )
				return TRACE_Stop;
			return TRACE_Skip;
		}
		return TRACE_Stop;
	}
}

// used instead of particles because particles have a really annoying positioning limitation
Class SaltDust : Actor
{
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		double ang = FRandom[Salt](0,360), pt = FRandom[Salt](-90,90);
		vel += (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt))*FRandom[Salt](0,0.5);
		scale *= FRandom[Salt](0.5,1.5);
		alpha *= FRandom[Salt](0.2,1.0);
		roll = FRandom[Salt](0,360);
	}

	Default
	{
		Radius 2;
		Height 2;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		Scale 0.2;
	}

	States
	{
	Spawn:
	Death:
		SALT A 1 A_FadeOut(0.05);
		Wait;
	}
}

Class SaltDust2 : SaltDust
{
	Default
	{
		-NOGRAVITY;
		Friction 1;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		vel *= 8;
	}
	States
	{
	Spawn:
		SALT A 1 A_FadeOut(0.02);
		Wait;
	}
}

Class SaltBullet : Actor
{
	SaltBulletTracer t;
	bool stopped;

	Default
	{
		Obituary "$O_SALT";
		Radius 0.1;
		Height 0;
		Speed 500;
		ReactionTime 1;
		+NOBLOCKMAP;
		+NOGRAVITY;
		+DONTSPLASH;
		+MISSILE;
		+NOEXTREMEDEATH;
	}

	void ExplodeSelf( Vector3 spos, Vector3 dir )
	{
		for ( int i=0; i<16; i++ )
		{
			let s = Spawn("SaltDust2",spos);
			s.vel = dir*FRandom[Dust](0.5,1.5);
		}
	}

	override void Tick()
	{
		if ( isFrozen() ) return;
		if ( stopped )
		{
			Destroy();
			return;
		}
		if ( !t )
		{
			t = new("SaltBulletTracer");
			t.owner = self;
			t.ignore = target;
		}
		Vector3 dir = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
		// trace to next step
		t.Trace(pos,cursector,dir,speed,0);
		// leave trail
		for ( int i=0; i<int(t.Results.Distance); i+=100 )
		{
			double ofs = min(t.Results.Distance,i+FRandom[Salt](0,100));
			Vector3 dpos = Vec3Offset(dir.x*ofs,dir.y*ofs,dir.z*ofs);
			Spawn("SaltDust",dpos);
		}
		// check for impact
		if ( t.Results.HitType == TRACE_HitNone )
		{
			// reposition
			if ( t.Results.Distance < speed )	// theoretically shouldn't happen, yet it does
				SetOrigin(t.Results.HitPos+t.Results.HitVector,true);
			else
			{
				SetOrigin(t.Results.HitPos,true);
				angle = atan2(t.Results.HitVector.y,t.Results.HitVector.x);
				pitch = asin(-t.Results.HitVector.z);
				pitch = clamp(pitch+reactiontime,-90,90);
			}
		}
		else if ( t.Results.HitType == TRACE_HitActor )
		{
			// make salty
			t.Results.HitActor.DamageMobj(self,target,Random[Salt](1,4),'Salty');
			SaltyDebuff.Apply(t.Results.HitActor,target);
			ExplodeSelf(t.Results.HitPos-t.Results.HitVector*2,-t.Results.HitVector);
			stopped = true;
		}
		else
		{
			Vector3 HitNormal = -t.Results.HitVector;
			if ( t.Results.HitType == TRACE_HitWall )
			{
				t.Results.HitLine.RemoteActivate(target,t.Results.Side,SPAC_Impact,pos);
				// calculate normal
				HitNormal = (-t.Results.HitLine.delta.y,t.Results.HitLine.delta.x,0).unit();
				if ( t.Results.Side == 0 ) HitNormal *= -1;
			}
			else if ( t.Results.HitType == TRACE_HitFloor )
				HitNormal = t.Results.HitSector.floorplane.Normal;
			else if ( t.Results.HitType == TRACE_HitCeiling )
				HitNormal = t.Results.HitSector.ceilingplane.Normal;
			// reposition and do decal
			SetOrigin(t.Results.HitPos+HitNormal*2,true);
			A_SprayDecal("BulletChip");
			ExplodeSelf(t.Results.HitPos+HitNormal*2,HitNormal);
			stopped = true;
		}
	}
}

Class SaltBlast : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+FORCEXYBILLBOARD;
	}
	States
	{
	Spawn:
		MSLT ABC 2 Bright;
		Stop;
	}
}

Class PJSalt : Actor
{
	double rollvel;

	Default
	{
		Radius 2;
		Height 2;
		Speed 40;
		Scale 0.5;
		ReactionTime 0;
		PROJECTILE;
		-NOGRAVITY;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		+NOEXTREMEDEATH;
		+INTERPOLATEANGLES;
	}
	action void A_SaltExplosion()
	{
		bNOGRAVITY = true;
		let b = Spawn("SaltBlast",pos);
		if ( bAMBUSH ) b.Scale *= 4;
		A_StartSound("weapons/rocklx");
	}
	action void A_SaltBurst()
	{
		int amt = 1+int(ReactionTime**2);
		double dist = 1+int(ReactionTime**1.5);
		if ( bAMBUSH ) dist *= 1.2;
		FLineTraceData d;
		for ( int i=0; i<amt; i++ )
		{
			LineTrace(FRandom[Salt](0,360),dist+FRandom[Salt](0,10),FRandom[Salt](-90,90),TRF_THRUACTORS,data:d);
			if ( d.HitActor )
			{
				d.HitActor.DamageMobj(self,target,Random[Salt](0,1),'Salty');
				SaltyDebuff.Apply(d.HitActor,target);
			}
			if ( Random[Salt](0,4) ) continue;
			let s = Spawn("SaltDust2",d.HitLocation);
			s.vel = d.HitDir*FRandom[Salt](1,4);
			s.scale *= 2;
			s.alpha *= 2;
		}
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		rollvel = FRandom[Salt](30,60)*RandomPick[Salt](-1,1);
		vel.z += 5;
	}
	override void Tick()
	{
		Super.Tick();
		if ( isFrozen() ) return;
		roll += rollvel;
		if ( InStateSequence(CurState,FindState("Death")) ) return;
		for ( int i=0; i<4; i++ )
		{
			let s = Spawn("SaltDust2",pos);
			double ang = FRandom[Salt](0,360), pt = FRandom[Salt](-90,90);
			s.vel = (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt))*FRandom[Salt](0.2,1);
			s.scale *= 2;
			s.alpha *= 2;
		}
	}
	States
	{
	Spawn:
		PJST A -1;
		Stop;
	Death:
		TNT1 A 0 A_SaltExplosion();
		TNT1 AAAAA 1
		{
			A_SaltBurst();
			ReactionTime++;
			A_SaltBurst();
			ReactionTime++;
			if ( bAMBUSH )
			{
				A_SaltBurst();
				ReactionTime++;
				A_SaltBurst();
				ReactionTime++;
			}
		}
		Stop;
	}
}

Class SaltyDebuff : Thinker
{
	Actor victim, instigator, faketarget, icon;
	int saltlevel, cooldown, maxsalt;

	static void Apply( Actor victim, Actor instigator )
	{
		if ( !victim || (!victim.player && !victim.bISMONSTER) || victim.CountInv("AAAAAAAAA") ) return;
		let t = ThinkerIterator.Create("SaltyDebuff",STAT_USER);
		SaltyDebuff tt, f;
		while ( tt = SaltyDebuff(t.Next()) )
		{
			if ( tt.victim != victim ) continue;
			f = tt;
		}
		if ( !f )
		{
			f = new("SaltyDebuff");
			f.ChangeStatNum(STAT_USER);
			f.maxsalt = victim.player?200:2000;
			f.saltlevel = victim.player?20:200;
		}
		f.victim = victim;
		f.instigator = instigator;
		int saltinc = victim.player?2:20;
		f.saltlevel = min(f.maxsalt,f.saltlevel+saltinc);
		victim.bNOTARGET = false;
		victim.bNEVERTARGET = false;
		victim.bQUICKTORETALIATE = true;
		victim.bFORCEINFIGHTING = true;
		victim.bNOINFIGHTING = false;
		victim.bNOINFIGHTSPECIES = false;
		victim.bMISSILEMORE = true;
		victim.bMISSILEEVENMORE = true;
	}

	static bool IsSalty( Actor victim )
	{
		if ( !victim || (!victim.player && !victim.bISMONSTER) ) return false;
		let t = ThinkerIterator.Create("SaltyDebuff",STAT_USER);
		SaltyDebuff tt, f;
		while ( tt = SaltyDebuff(t.Next()) )
		{
			if ( tt.victim != victim ) continue;
			f = tt;
		}
		return !!f;
	}

	override void OnDestroy()
	{
		Super.OnDestroy();
		if ( victim )
		{
			let d = GetDefaultByType(victim.GetClass());
			victim.bNOTARGET = d.bNOTARGET;
			victim.bNEVERTARGET = d.bNEVERTARGET;
			victim.bQUICKTORETALIATE = d.bQUICKTORETALIATE;
			victim.bFORCEINFIGHTING = d.bFORCEINFIGHTING;
			victim.bNOINFIGHTING = d.bNOINFIGHTING;
			victim.bNOINFIGHTSPECIES = d.bNOINFIGHTSPECIES;
			victim.bMISSILEMORE = d.bMISSILEMORE;
			victim.bMISSILEEVENMORE = d.bMISSILEEVENMORE;
			if ( victim.target == faketarget )
				victim.target = instigator;
		}
		if ( faketarget ) faketarget.Destroy();
		if ( icon ) icon.target = null;
	}

	static void ForceTarget( Actor hater, Actor hatee )
	{
		hater.target = hatee;
		hater.lastheard = hatee;
		hater.lastenemy = hatee;
	}

	override void Tick()
	{
		if ( level.isFrozen() ) return;
		if ( (saltlevel < 0) || !victim || (victim.health <= 0) )
		{
			if ( icon )
			{
				icon.bAMBUSH = true;
				return;
			}
			Destroy();
			return;
		}
		if ( !icon )
		{
			icon = Actor.Spawn("SaltyDebuffIcon",victim.pos);
			icon.tracer = victim;
			icon.target = instigator;
		}
		if ( victim.CountInv("AAAAAAAAA") )
		{
			Destroy();
			return;
		}
		if ( !Random[Salt](0,100) ) victim.A_StartSound(victim.SeeSound);
		if ( !Random[Salt](0,30) && faketarget ) faketarget.bAMBUSH = false;
		if ( !Random[Salt](0,20-(saltlevel/100)) )
		{
			int amt = int(ceil(saltlevel*0.002));
			for ( int i=0; i<amt; i++ )
			{
				let s = Actor.Spawn("SaltDust2",victim.Vec3Offset(FRandom[Salt](-1,1)*victim.radius,FRandom[Salt](-1,1)*victim.radius,FRandom[Salt](0,1)*victim.height));
				s.vel = (FRandom[Salt](-.5,.5),FRandom[Salt](-.5,.5),FRandom[Salt](0,1));
			}
		}
		if ( !Random[Salt](0,10) && victim.player )
		{
			victim.player.cmd.buttons |= Random[Salt](0,20)?BT_ATTACK:BT_ALTATTACK;
			if ( PlayerPawn(victim) )
				PlayerPawn(victim).CheckWeaponFire();
		}
		if ( cooldown <= 0 )
		{
			if ( victim.player )
			{
				GibeAbort.DoFlash(victim,"FF 00 00",3);
				GibeAbort.DoFlash(victim,"FF 00 00",100,0.25);
				victim.DamageMobj(victim,icon,Random[Salt](0,3),'Rage',DMG_THRUSTLESS);
				victim.A_SetAngle(victim.angle+FRandom[Salt](-15,15),SPF_INTERPOLATE);
				victim.A_SetPitch(victim.pitch+FRandom[Salt](-15,15),SPF_INTERPOLATE);
				cooldown = Random[Salt](3,30);
			}
			else
			{
				if ( victim.target == victim ) ForceTarget(victim,faketarget);
				switch ( Random[Salt](0,3) )
				{
				case 0:
					ThinkerIterator t = ThinkerIterator.Create("Actor");
					Actor a, f;
					double closest = double.max;
					while ( a = Actor(t.Next()) )
					{
						if ( (a == victim) || (a == instigator) || (a == faketarget) || !a.bSHOOTABLE || !victim.CheckSight(a) ) continue;
						double dist = victim.Distance3D(a);
						if ( dist < closest )
						{
							closest = dist;
							f = a;
						}
					}
					if ( f )
					{
						ForceTarget(victim,f);
						cooldown = Random[Salt](30,60);
						break;
					}
				case 1:
					if ( victim.FindState("Melee") )
					{
						ForceTarget(victim,victim);
						cooldown = Random[Salt](10,30);
					}
					break;
				case 2:
					victim.DamageMobj(instigator,icon,Random[Salt](1,3),'Rage',DMG_THRUSTLESS);
					cooldown = Random[Salt](3,10);
					break;
				case 3:
					if ( !faketarget ) faketarget = Actor.Spawn("SaltTarget",victim.pos);
					faketarget.target = victim;
					faketarget.bAMBUSH = true;
					cooldown = Random[Salt](40,120);
					break;
				}
			}
		}
		cooldown--;
		if ( !Random[Salt](0,3) ) saltlevel--;
	}
}

Class SaltyDebuffIcon : Actor
{
	int cnt;
	double atheight;
	double oldroll;

	override String GetObituary( Actor victim, Actor inflictor, Name mod, bool playerattack )
	{
		string gstr = "";
		if ( victim.player )
		{
			switch ( victim.player.GetGender() )
			{
			case 0:
				gstr = StringTable.Localize("$O_SALTSELFM");
				break;
			case 1:
				gstr = StringTable.Localize("$O_SALTSELFF");
				break;
			default:
				gstr = StringTable.Localize("$O_SALTSELFN");
				break;
			}
		}
		if ( victim == inflictor )
		{
			String loc = StringTable.Localize("$O_SALTSELF");
			return String.Format(loc,gstr);
		}
		else if ( inflictor ) return StringTable.Localize("$O_SALT");
		else return StringTable.Localize("$O_SALTNONE");
	}
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+FORCEPAIN;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		+INTERPOLATEANGLES;
		Scale 0.5;
		Alpha double.epsilon;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		if ( tracer ) atheight = tracer.height;
	}
	override void Tick()
	{
		Super.Tick();
		if ( isFrozen() ) return;
		cnt++;
		roll = cos(cnt*10)*15;
		oldroll = roll;
		if ( !tracer || (tracer.health <= 0) || bAMBUSH )
		{
			A_FadeOut(0.02);
			return;
		}
		if ( alpha < 1. ) A_FadeIn(0.02);
		SetOrigin(tracer.Vec3Offset(0,0,atheight+8),true);
	}
	States
	{
	Spawn:
		PJST B -1 Bright;
		Stop;
	}
}

Class SaltTarget : Actor
{
	Vector3 dir;

	Default
	{
		+SPECTRAL;
		+NOGRAVITY;
		+DONTSPLASH;
		+SHOOTABLE;
		+NODAMAGE;
		Radius 0.1;
		Height 0;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		double ang, pt;
		ang = FRandom[Salt](0,360);
		pt = FRandom[Salt](-30,0);
		dir = (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt));
	}

	override void Tick()
	{
		Super.Tick();
		if ( isFrozen() ) return;
		if ( !target )
		{
			Destroy();
			return;
		}
		if ( bAMBUSH && (target.target != self) )
			SaltyDebuff.ForceTarget(target,self);
		else if ( target.target == self )
			SaltyDebuff.ForceTarget(target,null);
		if ( !Random[Salt](0,10) )
		{
			double ang, pt;
			ang = FRandom[Salt](0,360);
			pt = FRandom[Salt](-30,0);
			dir = (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt));
		}
		double ofs;
		if ( target.FindState("Missile") ) ofs = target.radius+100;
		else ofs = target.MeleeRange;
		FLineTraceData d;
		target.LineTrace(atan2(dir.y,dir.x),ofs,asin(-dir.z),TRF_THRUACTORS,data:d);
		SetOrigin(d.HitLocation,true);
	}
}

Class ASaltRifle : AbortWeapon
{
	Vector2 wdir;

	action void A_Eject()
	{
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*20.0+y*2.5-z*7.5;
		let c = Spawn("SaltCasing",origin);
		c.vel = vel+x*FRandom[Junk](0,2)+y*FRandom[Junk](5,8)+z*FRandom[Junk](3,6);
	}

	action void A_SaltBullet( bool bFast = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( !bFast && !weap.DepleteAmmo(weap.bAltFire,true,1) ) return;
		A_AlertMonsters(2000);
		A_Overlay(PSP_FLASH,"Flash");
		if ( bFast )
		{
			A_StartSound("salt/bfire",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("salt/bfire",CHAN_5,CHANF_OVERLAP);
		}
		else A_StartSound("salt/fire",CHAN_WEAPON,CHANF_OVERLAP);
		let l = Spawn("SaltLight");
		l.target = self;
		A_Eject();
		Vector3 x, y, z, dir;
		double a, s;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0-8.0*z;
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		int amount;
		double spread;
		if ( bFast )
		{
			amount = 5;
			spread = 0.05;
		}
		else
		{
			amount = 1;
			spread = 0.01;
		}
		for ( int i=0; i<amount; i++ )
		{
			let p = Spawn("SaltBullet",origin);
			a = FRandom[Salt](0,360);
			s = FRandom[Salt](0,spread);
			Vector3 dir = (x + y*cos(a)*s + z*sin(a)*s).unit();
			p.angle = atan2(dir.y,dir.x);
			p.pitch = -asin(dir.z);
			p.target = self;
		}
	}

	action void A_PJSalt( bool bFast = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( !bFast && !weap.DepleteAmmo(weap.bAltFire,true,1) ) return;
		A_AlertMonsters(2000);
		A_Overlay(PSP_WEAPON-2,"AltFlash");
		if ( bFast )
		{
			A_StartSound("salt/balt",CHAN_WEAPON,CHANF_OVERLAP);
			A_StartSound("salt/balt",CHAN_5,CHANF_OVERLAP);
		}
		else A_StartSound("salt/alt",CHAN_WEAPON,CHANF_OVERLAP);
		let l = Spawn("SaltLight");
		l.target = self;
		Vector3 x, y, z, dir;
		double a, s;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*10.0-8.0*z;
		let p = Spawn("PJSalt",origin);
		p.angle = angle;
		p.pitch = BulletSlope();
		p.target = self;
		p.vel = (cos(p.angle)*cos(p.pitch),sin(p.angle)*cos(p.pitch),-sin(p.pitch))*p.speed;
		if ( bFast )
		{
			p.scale *= 2.5;
			p.vel *= 1.5;
			p.bAMBUSH = true;
		}
	}

	Default
	{
		Tag "$T_SALT";
		Inventory.PickupMessage "$I_SALT";
		Weapon.SlotNumber 4;
		Weapon.SelectionOrder 60;
		Weapon.AmmoGive 15;
		Weapon.AmmoType "Peas";
		Weapon.AmmoType2 "Peas";
		Weapon.AmmoUse 2;
		Weapon.MinSelectionAmmo1 2;
		Weapon.AmmoUse2 12;
		AbortWeapon.KickTics 4;
		AbortWeapon.KickX -6;
		AbortWeapon.KickY 4;
		AbortWeapon.ThrowForce 0.9;
		AbortWeapon.ThrowMass 120;
		AbortWeapon.ThrowName "$W_SALT";
	}
	States
	{
	Spawn:
		SLTP A -1;
		Stop;
	Select:
		SLTR A 1 A_Raise(9);
		Wait;
	Ready:
		SLTR A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Wait;
	Fire:
		SLTR AA 1 A_WeaponOffset(0,-10,WOF_ADD|WOF_INTERPOLATE);
	Hold:
		SLTR A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastFire");
		SLTR A 0 A_JumpIfNoAmmo("DryFire");
		SLTR A 0
		{
			invoker.wdir = (FRandom[Salt](-1,1),FRandom[Salt](2,4));
			A_SaltBullet();
			A_Swing(invoker.wdir.x*0.1,-invoker.wdir.y*0.1);
		}
		SLTR A 1
		{
			A_WeaponOffset(invoker.wdir.x,invoker.wdir.y,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(invoker.wdir.x*0.05,-invoker.wdir.y*0.05);
		}
		SLTR A 1;
		SLTR AA 1
		{
			A_WeaponOffset(-invoker.wdir.x*.5,-invoker.wdir.y*.5,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-invoker.wdir.x*0.075,invoker.wdir.y*0.075);
		}
		SLTR A 0 A_ReFire("Hold");
		SLTR AA 1 A_WeaponOffset(0,10,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	DryFire:
		SLTR A 0 A_StartSound("pea/empty",CHAN_WEAPON,CHANF_OVERLAP);
		SLTR A 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		SLTR A 1;
		SLTR AA 1 A_WeaponOffset(0,-1,WOF_ADD|WOF_INTERPOLATE);
		SLTR A 0 A_ReFire("Hold");
		SLTR AA 1 A_WeaponOffset(0,10,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastFire:
		SLTR A 0
		{
			invoker.wdir = (FRandom[Salt](-2,2),FRandom[Salt](4,8));
			A_SaltBullet(true);
			A_Swing(invoker.wdir.x*0.1,-invoker.wdir.y*0.1);
		}
		SLTR AA 1
		{
			A_WeaponOffset(invoker.wdir.x,invoker.wdir.y,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(invoker.wdir.x*0.05,-invoker.wdir.y*0.05);
		}
		SLTR A 2;
		SLTR AAAA 1
		{
			A_WeaponOffset(-invoker.wdir.x*.5,-invoker.wdir.y*.5,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(-invoker.wdir.x*0.05,invoker.wdir.y*0.05);
		}
		SLTR A 0 A_ReFire("Hold");
		SLTR AA 1 A_WeaponOffset(0,10,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	Flash:
		SLTF AB 1 Bright;
		Stop;
	AltFire:
		SLTR AAAAA 1 A_WeaponOffset(0,-4,WOF_ADD|WOF_INTERPOLATE);
	AltHold:
		SLTR A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastAltFire");
		SLTR A 0 A_JumpIfNoAmmo("DryAltFire");
		SLTR A 4;
		SLTR A 0
		{
			A_PJSalt();
			A_QuakeEx(6,6,6,12,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:0.05);
			A_Swing(0,-1,1);
		}
		SLTR AA 1
		{
			A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-0.5);
		}
		SLTR AA 1
		{
			A_WeaponOffset(0,1,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-0.5);
		}
		SLTR A 4;
		SLTR AAA 1
		{
			A_WeaponOffset(0,-2,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,1);
		}
		SLTR A 0 A_ReFire("AltHold");
		SLTR AAAAA 1 A_WeaponOffset(0,4,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	DryAltFire:
		SLTR A 0 A_StartSound("pea/empty",CHAN_WEAPON,CHANF_OVERLAP);
		SLTR A 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		SLTR A 1;
		SLTR AA 1 A_WeaponOffset(0,-1,WOF_ADD|WOF_INTERPOLATE);
		SLTR A 5;
		SLTR A 0 A_ReFire("AltHold");
		SLTR AAAAA 1 A_WeaponOffset(0,4,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastAltFire:
		SLTR A 4;
		SLTR A 0
		{
			A_PJSalt(true);
			A_QuakeEx(9,9,9,15,0,1,"",QF_RELATIVE|QF_SCALEDOWN,rollIntensity:0.2);
			A_Swing(0,.5);
		}
		SLTR AA 1
		{
			A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,.25);
		}
		SLTR AA 1
		{
			A_WeaponOffset(0,1,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,.25);
		}
		SLTR A 8;
		SLTR AAAAAA 1
		{
			A_WeaponOffset(0,-1,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-.25);
		}
		SLTR A 0 A_ReFire("AltHold");
		SLTR AAAAA 1 A_WeaponOffset(0,4,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	AltFlash:
		SLAF ABC 2 Bright;
		Stop;
	Deselect:
		SLTR A 1 A_Lower(9);
		Wait;
	}
}
