Class SpamSmoke : Actor
{
	double rollvel;
	Default
	{
		RenderStyle "Shaded";
		Scale 2.0;
		+ROLLSPRITE;
		+ROLLCENTER;
		+FORCEXYBILLBOARD;
		+INTERPOLATEANGLES;
		+NOGRAVITY;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		rollvel = FRandom[Spam](-1,1);
		scale *= FRandom[Spam](0.5,3.0);
		alpha *= FRandom[Spam](0.2,1.0);
		double ang = FRandom[Spam](0,360);
		double pt = FRandom[Spam](-90,90);
		vel += (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt))*FRandom[Spam](0.5,4.0);
		SetState(CurState+Random[Spam](0,19));
		int gray = Random[Spam](32,64);
		SetShade(Color(gray,gray,gray));
	}
	override void Tick()
	{
		Super.Tick();
		roll += rollvel;
		vel *= 0.996;
		A_FadeOut(0.008);
	}
	States
	{
	Spawn:
		BSMK ABCDEFGHIJKLMNOPQRST -1;
		Stop;
	}
}

Class SpamTracer : LineTracer
{
	Actor ignore;
	Array<Actor> HitActors;

	override ETraceStatus TraceCallback()
	{
		if ( Results.HitType == TRACE_HitActor )
		{
			if ( Results.HitActor == ignore ) return TRACE_Skip;
			if ( Results.HitActor.bSHOOTABLE ) HitActors.Push(Results.HitActor);
			return TRACE_Skip;
		}
		else if ( (Results.HitType == TRACE_HitWall) && (Results.Tier == TIER_Middle) )
		{
			if ( !Results.HitLine.sidedef[1] || (Results.HitLine.Flags&(Line.ML_BlockHitscan|Line.ML_BlockEverything)) )
				return TRACE_Stop;
			return TRACE_Skip;
		}
		return TRACE_Stop;
	}
}

Class SpamDecal : Actor
{
	Default
	{
		+NOGRAVITY;
		+NOBLOCKMAP;
	}
	override void PostBeginPlay()
	{
		A_SprayDecal("BulletChip");
		Destroy();
	}
	override void Tick(){}
}

Class SpamCannon : AbortWeapon
{
	Vector2 spamdir[32];
	SpamTracer t;

	action void A_FlashSpread()
	{
		A_OverlayOffset(OverlayID(),invoker.spamdir[OverlayID()+100].x,invoker.spamdir[OverlayID()+100].y,WOF_ADD|WOF_INTERPOLATE);
		invoker.spamdir[OverlayID()+100] *= 0.95;
	}

	action void A_FireSpam( bool bFast = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( !bFast )
		{
			if ( weap.Ammo1.Amount <= 0 ) return;
			weap.DepleteAmmo(weap.bAltFire,true,1);
		}
		GibeAbort.DoFlash(self,"FF E0 A0",5,0.8);
		GibeAbort.DoFlash(self,"FF C0 00",30,0.4);
		A_QuakeEx(9,9,9,30,0,5000,"",QF_RELATIVE|QF_SCALEDOWN,falloff:2000,rollIntensity:0.8);
		if ( !abort_mufflegsg )
		{
			A_StartSound("spam/fire",CHAN_WEAPON,CHANF_OVERLAP,1.0,ATTN_NONE);
			A_StartSound("spam/fire",CHAN_5,CHANF_OVERLAP,1.0,ATTN_NONE);
			A_StartSound("spam/fire",CHAN_6,CHANF_OVERLAP,1.0,ATTN_NONE);
			A_StartSound("spam/fire",CHAN_7,CHANF_OVERLAP,1.0,ATTN_NONE);
		}
		else A_StartSound("spam/fire",CHAN_WEAPON,CHANF_OVERLAP,0.3,ATTN_NONE);
		Vector3 x, y, z, dir;
		double a, s, dist;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz);
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		if ( !invoker.t ) invoker.t = new("SpamTracer");
		invoker.t.ignore = self;
		int maxrng = weap.bAltFire?120:30;
		bEXTREMEDEATH = bFast;
		for ( int ring=0; ring<maxrng; ring++ )
		{
			int rcnt = max(1,ring*3);
			double step = 360./rcnt;
			for ( int i=0; i<rcnt; i++ )
			{
				s = (ring+FRandom[Spam](-0.5,0.5))*0.01;
				if ( !Random[Spam](0,2) ) s *= FRandom[Spam](1.0,4.0);
				if ( FRandom[Spam](0,s) > 0.001*maxrng ) continue;
				a = (i+FRandom[Spam](-0.5,0.5))*step;
				dir = (x + y*cos(a)*s + z*sin(a)*s).unit();
				invoker.t.HitActors.Clear();
				invoker.t.Trace(origin,CurSector,dir,bFast?10000.:5000.,0);
				for ( int j=0; j<invoker.t.HitActors.Size(); j++ )
				{
					let a = invoker.t.HitActors[j];
					if ( bFast )
					{
						if ( !a.bDONTTHRUST ) a.vel = (dir+z*0.08)*(50000./a.mass);
						a.DamageMobj(invoker,self,int(Random[Spam](3,7)**3),'Shot');
					}
					else
					{
						if ( !a.bDONTTHRUST ) a.vel = (dir+z*0.08)*(5000./a.mass);
						a.DamageMobj(invoker,self,Random[Spam](3,7)*9,'Shot');
					}
				}
				let a = Spawn("SpamDecal",invoker.t.Results.HitPos-invoker.t.Results.HitVector*4);
				a.angle = atan2(invoker.t.Results.HitVector.y,invoker.t.Results.HitVector.x);
				a.pitch = asin(-invoker.t.Results.HitVector.z);
				double tdist = level.Vec3Diff(origin,invoker.t.Results.HitPos).length();
				int cnt = int(max(1,tdist/300.));
				for ( int j=0; j<cnt; j++ )
				{
					if ( Random[Spam](0,30) ) continue;
					dist = FRandom[Spam](0,tdist);
					let s = Spawn("SpamSmoke",level.Vec3Offset(origin,dir*dist));
					s.A_SetScale(s.scale.x+0.005*dist);
					s.vel += dir*FRandom[Spam](0,1.);
				}
			}
		}
		ThinkerIterator ti = ThinkerIterator.Create("Actor");
		Actor e;
		while ( e=Actor(ti.Next()) ) e.DamageMobj(invoker,self,0,'Hearing');
	}

	Default
	{
		Obituary "$O_SPAM";
		Tag "$T_SPAM";
		Inventory.PickupMessage "$I_SPAM";
		Weapon.SlotNumber 3;
		Weapon.SelectionOrder 40;
		Weapon.AmmoGive 16;
		Weapon.AmmoType "Pellets";
		Weapon.AmmoType2 "Pellets";
		Weapon.AmmoUse 8;
		Weapon.MinSelectionAmmo1 8;
		Weapon.AmmoUse2 32;
		AbortWeapon.KickTics 7;
		AbortWeapon.KickX -5;
		AbortWeapon.KickY 4;
		AbortWeapon.ThrowForce 0.6;
		AbortWeapon.ThrowMass 200;
		AbortWeapon.ThrowName "$W_SPAM";
		Scale 1.2;
		+FORCEPAIN;
	}
	States
	{
	Spawn:
		SPMP A -1;
		Stop;
	Select:
		SPMC A 1 A_Raise(9);
		Wait;
	Ready:
		SPMC A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Wait;
	Fire:
	AltFire:
		SPMC A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastFire");
		SPMC A 0 A_JumpIfNoAmmo("DryFire");
		SPMC AAAA 1 A_WeaponOffset(0,-2,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 3;
		SPMC A 8 A_StartSound("spam/click",CHAN_WEAPON);
		SPMC A 0
		{
			A_FireSpam();
			static const statelabel fstates[] =
			{
				"Flash1", "Flash2", "Flash3", "Flash4", "Flash5"
			};
			for ( int i=0; i<32; i++ )
			{
				invoker.spamdir[i] = (FRandom[Spam](-16,16),FRandom[Spam](-12,4));
				int dec = Random[Spam](0,4);
				A_Overlay(-100+i,fstates[dec]);
				A_OverlayFlags(-100+i,PSPF_ADDWEAPON,false);
				A_OverlayOffset(-100+i,0,32);
			}
			A_Swing(0,-8,24);
		}
		SPMC AA 1
		{
			A_WeaponOffset(0,8,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-4,12);
		}
		SPMC AAA 1
		{
			A_WeaponOffset(0,4,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-2,6);
		}
		SPMC AA 1
		{
			A_WeaponOffset(0,1,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-1,3);
		}
		SPMC A 6
		{
			if ( Weapon(invoker)&&Weapon(invoker).bAltFire )
				A_SetTics(12);
		}
		SPMC AAAAAAAAAA 1
		{
			A_WeaponOffset(0,-3,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,2.4);
		}
		SPMC A 4
		{
			if ( Weapon(invoker)&&Weapon(invoker).bAltFire )
				A_SetTics(8);
		}
		SPMC AAAA 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 2;
		SPMC A 8;
		SPMC AAA 1 A_WeaponOffset(-3,2,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(-2,4,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(-1,5,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 6;
		SPMC A 0 A_StartSound("spam/reload",CHAN_WEAPON);
		SPMC A 1 A_WeaponOffset(2,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AA 1 A_WeaponOffset(1,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAAA 1 A_WeaponOffset(-1,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 4;
		SPMC A 1 A_WeaponOffset(4,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AA 1 A_WeaponOffset(2,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAAA 1 A_WeaponOffset(-2,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 5;
		SPMC AAA 1 A_WeaponOffset(1,-5,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(2,-4,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(3,-2,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastFire:
		SPMC AAAA 1 A_WeaponOffset(0,-2,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 2;
		SPMC A 5 A_StartSound("spam/click",CHAN_WEAPON);
		SPMC A 0
		{
			A_FireSpam(true);
			static const statelabel fstates[] =
			{
				"Flash1", "Flash2", "Flash3", "Flash4", "Flash5"
			};
			for ( int i=0; i<32; i++ )
			{
				invoker.spamdir[i] = (FRandom[Spam](-16,16),FRandom[Spam](-12,4));
				int dec = Random[Spam](0,4);
				A_Overlay(-100+i,fstates[dec]);
				A_OverlayFlags(-100+i,PSPF_ADDWEAPON,false);
				A_OverlayOffset(-100+i,0,32);
			}
			A_Swing(0,-8,24);
		}
		SPMC AA 1
		{
			A_WeaponOffset(0,8,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-4,12);
		}
		SPMC AAA 1
		{
			A_WeaponOffset(0,4,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-2,6);
		}
		SPMC AA 1
		{
			A_WeaponOffset(0,1,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,-1,3);
		}
		SPMC A 3;
		SPMC AAAAAAAAAA 1
		{
			A_WeaponOffset(0,-3,WOF_ADD|WOF_INTERPOLATE);
			A_Swing(0,2.4);
		}
		SPMC A 3;
		SPMC AAAA 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 2;
		SPMC AAA 1 A_WeaponOffset(-3,2,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(-2,4,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(-1,5,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 6;
		SPMC A 0 A_StartSound("spam/reload",CHAN_WEAPON);
		SPMC A 1 A_WeaponOffset(2,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AA 1 A_WeaponOffset(1,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAAA 1 A_WeaponOffset(-1,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 4;
		SPMC A 1 A_WeaponOffset(4,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AA 1 A_WeaponOffset(2,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAAA 1 A_WeaponOffset(-2,0,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 5;
		SPMC AAA 1 A_WeaponOffset(1,-5,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(2,-4,WOF_ADD|WOF_INTERPOLATE);
		SPMC AAA 1 A_WeaponOffset(3,-2,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	DryFire:
		SPMC AAAA 1 A_WeaponOffset(0,-2,WOF_ADD|WOF_INTERPOLATE);
		SPMC A 3;
		SPMC A 12 A_StartSound("spam/click",CHAN_WEAPON);
		SPMC AAAA 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	Flash1:
		SPF1 AABBCCDDEEFFGGHH 1 Bright A_FlashSpread();
		Stop;
	Flash2:
		SPF2 AAABBBCCCDDDEEEFFFGGGHHH 1 Bright A_FlashSpread();
		Stop;
	Flash3:
		SPF3 AABBCCDDEEFFGGHH 1 Bright A_FlashSpread();
		Stop;
	Flash4:
		SPF4 AAAABBBBCCCCDDDDEEEEFFFF 1 Bright A_FlashSpread();
		Stop;
	Flash5:
		SPF5 ABCDEFGH 1 Bright A_FlashSpread();
		Stop;
	Deselect:
		SPMC A 1 A_Lower(9);
		Wait;
	}
}
