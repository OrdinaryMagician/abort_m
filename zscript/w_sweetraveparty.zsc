Class RaveLight : PistolLight
{
	override void Tick()
	{
		Super.Tick();
		Vector3 fcol = RaveGun.hsv2rgb(RaveGun.fract(gametic/35.),1.,1.);
		args[LIGHT_RED] = int(fcol.x*255);
		args[LIGHT_GREEN] = int(fcol.y*255);
		args[LIGHT_BLUE] = int(fcol.z*255);
	}
}

Class RaveLightFade : DynamicLight
{
	Default
	{
		DynamicLight.Type "Point";
		args 255, 255, 255, 60;
		ReactionTime 15;
	}
	override void Tick()
	{
		Super.Tick();
		Vector3 fcol = RaveGun.hsv2rgb(RaveGun.fract(gametic/35.),1.,1.);
		args[LIGHT_RED] = int(fcol.x*255*(ReactionTime/15.));
		args[LIGHT_GREEN] = int(fcol.y*255*(ReactionTime/15.));
		args[LIGHT_BLUE] = int(fcol.z*255*(ReactionTime/15.));
		A_Countdown();
	}
}

Class RaveAttachedLight : DynamicLight
{
	override void Tick()
	{
		Super.Tick();
		if ( !target )
		{
			Destroy();
			return;
		}
		Vector3 fcol = RaveGun.hsv2rgb(RaveGun.fract(gametic/35.),1.,1.);
		args[LIGHT_RED] = int(fcol.x*255);
		args[LIGHT_GREEN] = int(fcol.y*255);
		args[LIGHT_BLUE] = int(fcol.z*255);
	}
}

Class RaveLaserTrail : Actor
{
	Default
	{
		Scale 0.5;
		Radius 0.1;
		Height 0;
		RenderStyle "Add";
		+NOGRAVITY;
		+NOBLOCKMAP;
		+FORCEXYBILLBOARD;
		ReactionTime 8;
	}
	override void Tick()
	{
		Super.Tick();
		vel *= 0.99;
	}
	States
	{
	Spawn:
		RLS1 AB 2 Bright A_CountDown();
		RLS2 AB 2 Bright A_CountDown();
		RLS3 AB 2 Bright A_CountDown();
		RLS4 AB 2 Bright A_CountDown();
		RLS5 AB 2 Bright A_CountDown();
		RLS6 AB 2 Bright A_CountDown();
		Loop;
	}
}
Class RaveLaserTrail2 : Actor
{
	Default
	{
		Scale 0.5;
		Radius 0.1;
		Height 0;
		RenderStyle "Add";
		BounceType "Doom";
		BounceFactor 1.0;
		WallBounceFactor 1.0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+FORCEXYBILLBOARD;
		+MISSILE;
		+THRUACTORS;
	}
	States
	{
	Spawn:
		RLS1 AB 2 Bright A_FadeOut();
		RLS2 AB 2 Bright A_FadeOut();
		RLS3 AB 2 Bright A_FadeOut();
		RLS4 AB 2 Bright A_FadeOut();
		RLS5 AB 2 Bright A_FadeOut();
		RLS6 AB 2 Bright A_FadeOut();
		Loop;
	}
}

Class RaveLaserTracer : LineTracer
{
	Actor ignore;

	override ETraceStatus TraceCallback()
	{
		if ( Results.HitType == TRACE_HitActor )
		{
			if ( Results.HitActor == ignore ) return TRACE_Skip;
			if ( Results.HitActor.bSHOOTABLE ) return TRACE_Stop;
			return TRACE_Skip;
		}
		else if ( (Results.HitType == TRACE_HitWall) && (Results.Tier == TIER_Middle) )
		{
			if ( !Results.HitLine.sidedef[1] || (Results.HitLine.Flags&(Line.ML_BlockHitscan|Line.ML_BlockEverything)) )
				return TRACE_Stop;
			return TRACE_Skip;
		}
		return TRACE_Stop;
	}
}

Class RaveHitSound : Actor
{
	Default
	{
		Radius 0.1;
		Height 0;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+DONTSPLASH;
	}
	States
	{
	Spawn:
		TNT1 A 120 NoDelay A_StartSound("rave/hit");
		Stop;
	}
}
Class RaveHitSound2 : RaveHitSound
{
	States
	{
	Spawn:
		TNT1 A 120 NoDelay A_StartSound("rave/althit");
		Stop;
	}
}

Class RaveLaser : Actor
{
	int phase;
	int lifetime;
	Vector3 dir;
	RaveLaserTracer t;
	ThinkerIterator ti;

	Default
	{
		Obituary "$O_RAVE";
		Radius 0.1;
		Height 0;
		Speed 8;
		ReactionTime 8;
		+NOGRAVITY;
		+NOBLOCKMAP;
		+DONTSPLASH;
		+MISSILE;
		+NOEXTREMEDEATH;
	}
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		dir = (cos(angle)*cos(pitch),sin(angle)*cos(pitch),-sin(pitch));
		A_StartSound("rave/laser",CHAN_VOICE,CHANF_LOOP,0.4);
		lifetime = Random[Rave](300,500);
	}
	override void OnDestroy()
	{
		Super.OnDestroy();
		A_StopSound(CHAN_VOICE);
	}
	void SearchTracer( double maxdist )
	{
		if ( !ti ) ti = ThinkerIterator.Create("Actor");
		ti.Reinit();
		Actor a;
		double closest = double.max;
		tracer = null;
		while ( a = Actor(ti.Next()) )
		{
			if ( !a.bSHOOTABLE || (a.Health <= 0) || a.bKilled || !a.bIsMonster || a.bCorpse || (a == target) || (target && target.isTeammate(a)) || !CheckSight(a) ) continue;
			Vector3 reldir = level.Vec3Diff(pos,a.Vec3Offset(0,0,a.height*0.5));
			double reldist = reldir.length();
			if ( reldist > maxdist ) continue;
			if ( reldist < closest )
			{
				closest = reldist;
				tracer = a;
			}
		}
	}
	virtual void RaveExplode( Actor victim = null )
	{
		Spawn("RaveHitSound",pos);
		double ang, pt;
		for ( int i=0; i<32; i++ )
		{
			let s = Spawn("RaveLaserTrail2",pos);
			ang = FRandom[Rave](0,360);
			pt = FRandom[Rave](-90,90);
			s.vel = (dir+(cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt)))*FRandom[Rave](1,4);
			s.SetState(s.FindState("Spawn")+Random[Rave](0,11));
		}
		Spawn("RaveLightFade",pos);
		if ( victim )
		{
			static const name ravecolors[] =
			{
				'RaveRed', 'RaveYellow', 'RaveGreen',
				'RaveCyan', 'RaveBlue', 'RaveMagenta'
			};
			victim.DamageMobj(self,target,Random[Rave](3,6)*11,ravecolors[Random[Rave](0,5)],DMG_THRUSTLESS);
		}
		Destroy();
	}
	override void Tick()
	{
		if ( !t ) t = new("RaveLaserTracer");
		t.ignore = bHITOWNER?null:target;
		A_AlertMonsters(300);
		SearchTracer(1000);
		for ( int i=0; i<ReactionTime; i++ )
		{
			// step the beam
			t.Trace(pos,CurSector,dir,speed,0);
			// check results
			if ( t.Results.HitType == TRACE_HitNone )
			{
				// leave trail and advance
				let s = Spawn("RaveLaserTrail",pos);
				s.SetState(s.FindState("Spawn")+phase);
				if ( t.Results.Distance < speed )	// theoretically shouldn't happen, yet it does
					SetOrigin(t.Results.HitPos+t.Results.HitVector,true);
				else
				{
					SetOrigin(t.Results.HitPos,true);
					dir = t.Results.HitVector;
				}
			}
			else if ( t.Results.HitType == TRACE_HitActor )
			{
				// collided with an actor, just die
				RaveExplode(t.Results.HitActor);
				return;
			}
			else
			{
				// collided with world geometry, bounce
				bHITOWNER = true;
				Vector3 HitNormal = -t.Results.HitVector;
				if ( t.Results.HitType == TRACE_HitWall )
				{
					t.Results.HitLine.RemoteActivate(target,t.Results.Side,SPAC_Impact,pos);
					HitNormal = (-t.Results.HitLine.delta.y,t.Results.HitLine.delta.x,0).unit();
					if ( t.Results.Side == 0 ) HitNormal *= -1;
				}
				else if ( t.Results.HitType == TRACE_HitFloor )
					HitNormal = t.Results.HitSector.floorplane.Normal;
				else if ( t.Results.HitType == TRACE_HitCeiling )
					HitNormal = t.Results.HitSector.ceilingplane.Normal;
				SetOrigin(t.Results.HitPos+HitNormal,true);
				Spawn("RaveHitSound",pos);
				dir = t.Results.HitVector;
				// bounce formula (thanks UE1 for making me memorize this damn thing)
				dir = dir-2*(dir dot HitNormal)*HitNormal;
				double ang, pt;
				for ( int i=0; i<6; i++ )
				{
					let s = Spawn("RaveLaserTrail2",pos);
					ang = FRandom[Rave](0,360);
					pt = FRandom[Rave](-90,90);
					s.vel = (dir+(cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt)))*FRandom[Rave](1,4);
					s.SetState(s.FindState("Spawn")+Random[Rave](0,11));
				}
			}
			// home in on tracer, if any
			if ( tracer && (tracer != target) )
			{
				Vector3 seekdir = level.Vec3Diff(pos,tracer.Vec3Offset(0,0,tracer.height*0.5));
				double seekdist = seekdir.length();
				dir = (dir+(seekdir.unit()*clamp((100.-seekdist)*0.01,0.,0.01))).unit();
			}
			// fuzz
			dir = (dir+(FRandom[Rave](-.001,.001),FRandom[Rave](-.001,.001),FRandom[Rave](-.001,.001))).unit();
			phase++;
			if ( phase >= 12 ) phase = 0;
			lifetime--;
			if ( lifetime <= 0 ) RaveExplode();
		}
	}
}

Class RaveLaser2 : RaveLaser
{
	Default
	{
		Obituary "$O_RAVEALT";
		ReactionTime 2;
	}
	override void RaveExplode( Actor victim )
	{
		Spawn("RaveHitSound2",pos);
		double ang, pt;
		for ( int i=0; i<32; i++ )
		{
			let s = Spawn("RaveLaserTrail2",pos);
			ang = FRandom[Rave](0,360);
			pt = FRandom[Rave](-90,90);
			s.scale *= 2;
			s.vel = (dir+(cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt)))*FRandom[Rave](1,8);
			s.SetState(s.FindState("Spawn")+Random[Rave](0,11));
		}
		Spawn("RaveLightFade",pos);
		Destroy();
	}
	override void Tick()
	{
		static const name ravecolors[] =
		{
			'RaveRed', 'RaveYellow', 'RaveGreen',
			'RaveCyan', 'RaveBlue', 'RaveMagenta'
		};
		if ( !t ) t = new("RaveLaserTracer");
		t.ignore = bHITOWNER?null:target;
		A_AlertMonsters(300);
		SearchTracer(5000);
		for ( int i=0; i<ReactionTime; i++ )
		{
			// step the beam
			t.Trace(pos,CurSector,dir,speed,0);
			// check results
			if ( t.Results.HitType == TRACE_HitNone )
			{
				// leave trail and advance
				double ang, pt;
				for ( int j=0; j<3; j++ )
				{
					let s = Spawn("RaveLaserTrail",pos);
					ang = FRandom[Rave](0,360);
					pt = FRandom[Rave](-90,90);
					s.scale *= 2;
					s.vel = (cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt))*FRandom[Rave](0.5,1.5);
					s.SetState(s.FindState("Spawn")+phase);
				}
				if ( t.Results.Distance < speed )	// theoretically shouldn't happen, yet it does
					SetOrigin(t.Results.HitPos+t.Results.HitVector,true);
				else
				{
					SetOrigin(t.Results.HitPos,true);
					dir = t.Results.HitVector;
				}
			}
			else if ( t.Results.HitType == TRACE_HitActor )
			{
				// bounce on targets
				Spawn("RaveHitSound",pos);
				lifetime -= 8;
				int cnt = bAMBUSH?3:1;
				for ( int j=0; j<cnt; j++ )
					t.Results.HitActor.DamageMobj(self,target,Random[Rave](3,6)*11,ravecolors[Random[Rave](0,5)],DMG_THRUSTLESS);
				dir = -t.Results.HitVector;
				SetOrigin(t.Results.HitPos+dir,true);
			}
			else
			{
				// collided with world geometry, bounce
				bHITOWNER = true;
				Vector3 HitNormal = -t.Results.HitVector;
				if ( t.Results.HitType == TRACE_HitWall )
				{
					t.Results.HitLine.RemoteActivate(target,t.Results.Side,SPAC_Impact,pos);
					HitNormal = (-t.Results.HitLine.delta.y,t.Results.HitLine.delta.x,0).unit();
					if ( t.Results.Side == 0 ) HitNormal *= -1;
				}
				else if ( t.Results.HitType == TRACE_HitFloor )
					HitNormal = t.Results.HitSector.floorplane.Normal;
				else if ( t.Results.HitType == TRACE_HitCeiling )
					HitNormal = t.Results.HitSector.ceilingplane.Normal;
				SetOrigin(t.Results.HitPos+HitNormal,true);
				Spawn("RaveHitSound2",pos);
				dir = t.Results.HitVector;
				// bounce formula (thanks UE1 for making me memorize this damn thing)
				dir = dir-2*(dir dot HitNormal)*HitNormal;
				double ang, pt;
				for ( int i=0; i<6; i++ )
				{
					let s = Spawn("RaveLaserTrail2",pos);
					ang = FRandom[Rave](0,360);
					pt = FRandom[Rave](-90,90);
					s.vel = (dir+(cos(ang)*cos(pt),sin(ang)*cos(pt),-sin(pt)))*FRandom[Rave](1,4);
					s.SetState(s.FindState("Spawn")+Random[Rave](0,11));
				}
			}
			// home in on tracer, if any
			if ( tracer && (tracer != target) )
			{
				Vector3 seekdir = level.Vec3Diff(pos,tracer.Vec3Offset(0,0,tracer.height*0.5));
				double seekdist = seekdir.length();
				dir = (dir+(seekdir.unit()*clamp((1000.-seekdist)*0.001,0.05,0.25))).unit();
			}
			// fuzz
			dir = (dir+(FRandom[Rave](-.04,.04),FRandom[Rave](-.04,.04),FRandom[Rave](-.04,.04))).unit();
			phase++;
			if ( phase >= 12 ) phase = 0;
		}
		lifetime--;
		if ( lifetime <= 0 ) RaveExplode();
	}
}

Class RaveGun : AbortWeapon
{
	int ct;

	static clearscope Vector3 hsv2rgb( double hue, double sat, double val )
	{
		double c = val*sat;
		double h = hue*6.;
		double x = c*(1.-abs(h%2-1));
		Vector3 rgb;
		if ( h <= 1. ) rgb = (c,x,0);
		else if ( h <= 2. ) rgb = (x,c,0);
		else if ( h <= 3. ) rgb = (0,c,x);
		else if ( h <= 4. ) rgb = (0,x,c);
		else if ( h <= 5. ) rgb = (x,0,c);
		else if ( h <= 6. ) rgb = (c,0,x);
		else rgb = (0,0,0);
		double m = val-c;
		return rgb+(m,m,m);
	}

	static clearscope double fract( double x )
	{
		return x-floor(x);
	}

	action void A_Eject( int num = 1 )
	{
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*20.0+y*2.5-z*7.5;
		static const name colors[] =
		{
			'DamRaveR', 'DamRaveY', 'DamRaveG',
			'DamRaveC', 'DamRaveB', 'DamRaveM'
		};
		for ( int i=0; i<num; i++ )
		{
			let c = Spawn("SaltCasing",origin);
			c.vel = vel+x*FRandom[Junk](0,2)+y*FRandom[Junk](5,8)+z*FRandom[Junk](3,6);
			if ( num > 1 ) c.A_SetTranslation(colors[Random[Rave](0,5)]);
			else c.A_SetTranslation(colors[int(fract(gametic/35.)*6)%6]);
		}
	}

	action void A_RaveFire( bool bFast = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( !bFast )
		{
			if ( weap.Ammo1.Amount <= 0 ) return;
			weap.DepleteAmmo(weap.bAltFire,true,1);
		}
		A_Overlay(PSP_WEAPON+2,"RaveFlash");
		A_OverlayFlags(PSP_WEAPON+2,PSPF_RENDERSTYLE,true);
		A_OverlayRenderstyle(PSP_WEAPON+2,STYLE_Add);
		A_AlertMonsters(300);
		Vector3 fcol = hsv2rgb(fract(gametic/35.),1.,1.);
		GibeAbort.DoFlash(self,Color(int(fcol.x*255),int(fcol.y*255),int(fcol.z*255)),4);
		A_StartSound("rave/fire",CHAN_WEAPON,CHANF_OVERLAP);
		let l = Spawn("RaveLight");
		l.target = self;
		A_Eject();
		Vector3 x, y, z, dir;
		double a, s;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*15.0-4.0*z;
		[x, y, z] = abort_CoordUtil.GetAxes(BulletSlope(),angle,roll);
		let p = Spawn("RaveLaser",origin);
		a = FRandom[Rave](0,360);
		s = FRandom[Rave](0,bFast?0.02:0.004);
		dir = (x + y*cos(a)*s + z*sin(a)*s).unit();
		p.angle = atan2(dir.y,dir.x);
		p.pitch = -asin(dir.z);
		p.target = self;
		p.speed = bFast?16:8;
		RaveLaser(p).phase = int(fract(gametic/35.)*12)%12;
	}

	action void A_RaveAltFire( bool bFast = false )
	{
		Weapon weap = Weapon(invoker);
		if ( !weap ) return;
		if ( !bFast )
		{
			if ( weap.Ammo1.Amount <= 0 ) return;
			weap.DepleteAmmo(weap.bAltFire,true,1);
		}
		A_Overlay(PSP_WEAPON+2,"RaveFlash");
		A_OverlayFlags(PSP_WEAPON+2,PSPF_RENDERSTYLE,true);
		A_OverlayRenderstyle(PSP_WEAPON+2,STYLE_Add);
		A_AlertMonsters(600);
		Vector3 fcol = hsv2rgb(fract(gametic/35.),1.,1.);
		GibeAbort.DoFlash(self,Color(int(fcol.x*255),int(fcol.y*255),int(fcol.z*255)),4);
		A_StartSound("rave/alt",CHAN_WEAPON,CHANF_OVERLAP);
		let l = Spawn("RaveLight");
		l.target = self;
		A_Eject(6);
		Vector3 x, y, z;
		[x, y, z] = abort_CoordUtil.GetAxes(pitch,angle,roll);
		Vector3 origin = Vec2OffsetZ(0,0,player.viewz)+x*15.0-4.0*z;
		let p = Spawn("RaveLaser2",origin);
		p.angle = angle;
		p.pitch = BulletSlope();
		p.target = self;
		p.speed = bFast?16:8;
		p.bAMBUSH = bFast;
		RaveLaser(p).phase = int(fract(gametic/35.)*12)%12;
	}

	Default
	{
		Tag "$T_RAVE";
		Inventory.PickupMessage "$I_RAVE";
		Weapon.SlotNumber 6;
		Weapon.SelectionOrder 50;
		Weapon.AmmoGive 6;
		Weapon.AmmoType "Bepis";
		Weapon.AmmoType2 "Bepis";
		Weapon.AmmoUse 1;
		Weapon.AmmoUse2 6;
		AbortWeapon.KickTics 9;
		AbortWeapon.KickX -4;
		AbortWeapon.KickY 3;
		AbortWeapon.ThrowForce 0.7;
		AbortWeapon.ThrowMass 160;
		AbortWeapon.ThrowName "$W_RAVE";
	}
	States
	{
	Spawn:
		RAVP ABC 2;
		Loop;
	Select:
		RAVG A 0 A_Overlay(PSP_WEAPON+1,"RaveGlow");
		RAVG A 1 A_Raise(9);
		Wait;
	Ready:
		RAVG A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
		Wait;
	Fire:
		RAVG AAAA 1 A_WeaponOffset(0,-2,WOF_ADD|WOF_INTERPOLATE);
	Hold:
		RAVG A 0 A_JumpIf(CountInv("AAAAAAAAA"),"FastFire");
		RAVG A 2 A_JumpIfNoAmmo("DryFire");
		RAVG A 0 A_RaveFire();
		RAVG A 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 4;
		RAVG AA 1 A_WeaponOffset(0,-1,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 5;
		RAVG A 2 A_ReFire("Hold");
		RAVG AAAA 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	FastFire:
		RAVG A 0 A_RaveFire(true);
		RAVG A 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 3;
		RAVG AA 1 A_WeaponOffset(0,-1,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 2;
		RAVG A 2 A_ReFire("Hold");
		RAVG AAAA 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	AltFire:
		RAVG AAAA 1 A_WeaponOffset(0,-2,WOF_ADD|WOF_INTERPOLATE);
	AltHold:
		RAVG A 0 A_JumpIf(CountInv("AAAAAAAAA"),2);
		RAVG A 2 A_JumpIfNoAmmo("DryFire");
		RAVG A 0
		{
			A_StartSound("rave/charge",CHAN_WEAPON);
			A_AlertMonsters(300);
			invoker.ct = 0;
		}
		RAVG A 1
		{
			double str = (invoker.ct/90.)**2;
			A_WeaponOffset(FRandom[Rave](-1,1)*str,24+FRandom[Rave](-1,1)*str,WOF_INTERPOLATE);
			invoker.ct++;
			if ( invoker.ct > 90 ) return ResolveState("AltContinue");
			return ResolveState(null);
		}
		Wait;
	AltContinue:
		RAVG A 0
		{
			A_WeaponOffset(0,24);
			A_RaveAltFire(CountInv("AAAAAAAAA"));
		}
		RAVG A 1 A_WeaponOffset(0,3,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 12
		{
			if ( CountInv("AAAAAAAAA") ) A_SetTics(3);
		}
		RAVG AAA 1 A_WeaponOffset(0,-1,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 6
		{
			if ( CountInv("AAAAAAAAA") ) A_SetTics(2);
		}
		RAVG A 5 A_ReFire("AltHold");
		RAVG AAAA 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	DryFire:
		RAVG A 2;
		RAVG A 0 A_StartSound("pea/empty",CHAN_5,CHANF_OVERLAP,0.2);
		RAVG A 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 4;
		RAVG AA 1 A_WeaponOffset(0,-1,WOF_ADD|WOF_INTERPOLATE);
		RAVG A 5;
		RAVG A 2
		{
			if ( Weapon(invoker) && Weapon(invoker).bAltFire )
				A_ReFire("AltHold");
			else
				A_ReFire("Hold");
		}
		RAVG AAAA 1 A_WeaponOffset(0,2,WOF_ADD|WOF_INTERPOLATE);
		Goto Ready;
	RaveGlow:
		RAVG B -1 Bright;
		Stop;
	RaveFlash:
		RAVF AB 3 Bright;
		Stop;
	Deselect:
		RAVG A 1 A_Lower(9);
		Wait;
	}
}
